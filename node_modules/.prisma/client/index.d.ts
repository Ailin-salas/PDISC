
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Torneo
 * 
 */
export type Torneo = $Result.DefaultSelection<Prisma.$TorneoPayload>
/**
 * Model Partida
 * 
 */
export type Partida = $Result.DefaultSelection<Prisma.$PartidaPayload>
/**
 * Model Inscripcion
 * 
 */
export type Inscripcion = $Result.DefaultSelection<Prisma.$InscripcionPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.torneo`: Exposes CRUD operations for the **Torneo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Torneos
    * const torneos = await prisma.torneo.findMany()
    * ```
    */
  get torneo(): Prisma.TorneoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.partida`: Exposes CRUD operations for the **Partida** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Partidas
    * const partidas = await prisma.partida.findMany()
    * ```
    */
  get partida(): Prisma.PartidaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inscripcion`: Exposes CRUD operations for the **Inscripcion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inscripcions
    * const inscripcions = await prisma.inscripcion.findMany()
    * ```
    */
  get inscripcion(): Prisma.InscripcionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Torneo: 'Torneo',
    Partida: 'Partida',
    Inscripcion: 'Inscripcion'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "usuario" | "torneo" | "partida" | "inscripcion"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Torneo: {
        payload: Prisma.$TorneoPayload<ExtArgs>
        fields: Prisma.TorneoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TorneoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TorneoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TorneoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TorneoPayload>
          }
          findFirst: {
            args: Prisma.TorneoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TorneoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TorneoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TorneoPayload>
          }
          findMany: {
            args: Prisma.TorneoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TorneoPayload>[]
          }
          create: {
            args: Prisma.TorneoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TorneoPayload>
          }
          createMany: {
            args: Prisma.TorneoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TorneoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TorneoPayload>
          }
          update: {
            args: Prisma.TorneoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TorneoPayload>
          }
          deleteMany: {
            args: Prisma.TorneoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TorneoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TorneoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TorneoPayload>
          }
          aggregate: {
            args: Prisma.TorneoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTorneo>
          }
          groupBy: {
            args: Prisma.TorneoGroupByArgs<ExtArgs>
            result: $Utils.Optional<TorneoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TorneoCountArgs<ExtArgs>
            result: $Utils.Optional<TorneoCountAggregateOutputType> | number
          }
        }
      }
      Partida: {
        payload: Prisma.$PartidaPayload<ExtArgs>
        fields: Prisma.PartidaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartidaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartidaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidaPayload>
          }
          findFirst: {
            args: Prisma.PartidaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartidaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidaPayload>
          }
          findMany: {
            args: Prisma.PartidaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidaPayload>[]
          }
          create: {
            args: Prisma.PartidaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidaPayload>
          }
          createMany: {
            args: Prisma.PartidaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PartidaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidaPayload>
          }
          update: {
            args: Prisma.PartidaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidaPayload>
          }
          deleteMany: {
            args: Prisma.PartidaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartidaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PartidaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidaPayload>
          }
          aggregate: {
            args: Prisma.PartidaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePartida>
          }
          groupBy: {
            args: Prisma.PartidaGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartidaGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartidaCountArgs<ExtArgs>
            result: $Utils.Optional<PartidaCountAggregateOutputType> | number
          }
        }
      }
      Inscripcion: {
        payload: Prisma.$InscripcionPayload<ExtArgs>
        fields: Prisma.InscripcionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InscripcionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscripcionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InscripcionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscripcionPayload>
          }
          findFirst: {
            args: Prisma.InscripcionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscripcionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InscripcionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscripcionPayload>
          }
          findMany: {
            args: Prisma.InscripcionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscripcionPayload>[]
          }
          create: {
            args: Prisma.InscripcionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscripcionPayload>
          }
          createMany: {
            args: Prisma.InscripcionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.InscripcionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscripcionPayload>
          }
          update: {
            args: Prisma.InscripcionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscripcionPayload>
          }
          deleteMany: {
            args: Prisma.InscripcionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InscripcionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InscripcionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscripcionPayload>
          }
          aggregate: {
            args: Prisma.InscripcionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInscripcion>
          }
          groupBy: {
            args: Prisma.InscripcionGroupByArgs<ExtArgs>
            result: $Utils.Optional<InscripcionGroupByOutputType>[]
          }
          count: {
            args: Prisma.InscripcionCountArgs<ExtArgs>
            result: $Utils.Optional<InscripcionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    usuario?: UsuarioOmit
    torneo?: TorneoOmit
    partida?: PartidaOmit
    inscripcion?: InscripcionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    torneosCreados: number
    inscripciones: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    torneosCreados?: boolean | UsuarioCountOutputTypeCountTorneosCreadosArgs
    inscripciones?: boolean | UsuarioCountOutputTypeCountInscripcionesArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountTorneosCreadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TorneoWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountInscripcionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InscripcionWhereInput
  }


  /**
   * Count Type TorneoCountOutputType
   */

  export type TorneoCountOutputType = {
    partidas: number
    inscripciones: number
  }

  export type TorneoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    partidas?: boolean | TorneoCountOutputTypeCountPartidasArgs
    inscripciones?: boolean | TorneoCountOutputTypeCountInscripcionesArgs
  }

  // Custom InputTypes
  /**
   * TorneoCountOutputType without action
   */
  export type TorneoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TorneoCountOutputType
     */
    select?: TorneoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TorneoCountOutputType without action
   */
  export type TorneoCountOutputTypeCountPartidasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartidaWhereInput
  }

  /**
   * TorneoCountOutputType without action
   */
  export type TorneoCountOutputTypeCountInscripcionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InscripcionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id_usuario: number | null
    ELO: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id_usuario: number | null
    ELO: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id_usuario: number | null
    email: string | null
    nombre: string | null
    password: string | null
    ELO: number | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id_usuario: number | null
    email: string | null
    nombre: string | null
    password: string | null
    ELO: number | null
  }

  export type UsuarioCountAggregateOutputType = {
    id_usuario: number
    email: number
    nombre: number
    password: number
    ELO: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id_usuario?: true
    ELO?: true
  }

  export type UsuarioSumAggregateInputType = {
    id_usuario?: true
    ELO?: true
  }

  export type UsuarioMinAggregateInputType = {
    id_usuario?: true
    email?: true
    nombre?: true
    password?: true
    ELO?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id_usuario?: true
    email?: true
    nombre?: true
    password?: true
    ELO?: true
  }

  export type UsuarioCountAggregateInputType = {
    id_usuario?: true
    email?: true
    nombre?: true
    password?: true
    ELO?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id_usuario: number
    email: string
    nombre: string
    password: string
    ELO: number | null
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_usuario?: boolean
    email?: boolean
    nombre?: boolean
    password?: boolean
    ELO?: boolean
    torneosCreados?: boolean | Usuario$torneosCreadosArgs<ExtArgs>
    inscripciones?: boolean | Usuario$inscripcionesArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>



  export type UsuarioSelectScalar = {
    id_usuario?: boolean
    email?: boolean
    nombre?: boolean
    password?: boolean
    ELO?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_usuario" | "email" | "nombre" | "password" | "ELO", ExtArgs["result"]["usuario"]>
  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    torneosCreados?: boolean | Usuario$torneosCreadosArgs<ExtArgs>
    inscripciones?: boolean | Usuario$inscripcionesArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      torneosCreados: Prisma.$TorneoPayload<ExtArgs>[]
      inscripciones: Prisma.$InscripcionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_usuario: number
      email: string
      nombre: string
      password: string
      ELO: number | null
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id_usuario`
     * const usuarioWithId_usuarioOnly = await prisma.usuario.findMany({ select: { id_usuario: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    torneosCreados<T extends Usuario$torneosCreadosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$torneosCreadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TorneoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    inscripciones<T extends Usuario$inscripcionesArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$inscripcionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InscripcionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */
  interface UsuarioFieldRefs {
    readonly id_usuario: FieldRef<"Usuario", 'Int'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly nombre: FieldRef<"Usuario", 'String'>
    readonly password: FieldRef<"Usuario", 'String'>
    readonly ELO: FieldRef<"Usuario", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario.torneosCreados
   */
  export type Usuario$torneosCreadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Torneo
     */
    select?: TorneoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Torneo
     */
    omit?: TorneoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TorneoInclude<ExtArgs> | null
    where?: TorneoWhereInput
    orderBy?: TorneoOrderByWithRelationInput | TorneoOrderByWithRelationInput[]
    cursor?: TorneoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TorneoScalarFieldEnum | TorneoScalarFieldEnum[]
  }

  /**
   * Usuario.inscripciones
   */
  export type Usuario$inscripcionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inscripcion
     */
    select?: InscripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inscripcion
     */
    omit?: InscripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscripcionInclude<ExtArgs> | null
    where?: InscripcionWhereInput
    orderBy?: InscripcionOrderByWithRelationInput | InscripcionOrderByWithRelationInput[]
    cursor?: InscripcionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InscripcionScalarFieldEnum | InscripcionScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Torneo
   */

  export type AggregateTorneo = {
    _count: TorneoCountAggregateOutputType | null
    _avg: TorneoAvgAggregateOutputType | null
    _sum: TorneoSumAggregateOutputType | null
    _min: TorneoMinAggregateOutputType | null
    _max: TorneoMaxAggregateOutputType | null
  }

  export type TorneoAvgAggregateOutputType = {
    id_torneo: number | null
    creadorId: number | null
  }

  export type TorneoSumAggregateOutputType = {
    id_torneo: number | null
    creadorId: number | null
  }

  export type TorneoMinAggregateOutputType = {
    id_torneo: number | null
    nombre: string | null
    fecha_inicio: Date | null
    reglas: string | null
    premios: string | null
    tipo_torneo: string | null
    creadorId: number | null
  }

  export type TorneoMaxAggregateOutputType = {
    id_torneo: number | null
    nombre: string | null
    fecha_inicio: Date | null
    reglas: string | null
    premios: string | null
    tipo_torneo: string | null
    creadorId: number | null
  }

  export type TorneoCountAggregateOutputType = {
    id_torneo: number
    nombre: number
    fecha_inicio: number
    reglas: number
    premios: number
    tipo_torneo: number
    creadorId: number
    _all: number
  }


  export type TorneoAvgAggregateInputType = {
    id_torneo?: true
    creadorId?: true
  }

  export type TorneoSumAggregateInputType = {
    id_torneo?: true
    creadorId?: true
  }

  export type TorneoMinAggregateInputType = {
    id_torneo?: true
    nombre?: true
    fecha_inicio?: true
    reglas?: true
    premios?: true
    tipo_torneo?: true
    creadorId?: true
  }

  export type TorneoMaxAggregateInputType = {
    id_torneo?: true
    nombre?: true
    fecha_inicio?: true
    reglas?: true
    premios?: true
    tipo_torneo?: true
    creadorId?: true
  }

  export type TorneoCountAggregateInputType = {
    id_torneo?: true
    nombre?: true
    fecha_inicio?: true
    reglas?: true
    premios?: true
    tipo_torneo?: true
    creadorId?: true
    _all?: true
  }

  export type TorneoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Torneo to aggregate.
     */
    where?: TorneoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Torneos to fetch.
     */
    orderBy?: TorneoOrderByWithRelationInput | TorneoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TorneoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Torneos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Torneos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Torneos
    **/
    _count?: true | TorneoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TorneoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TorneoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TorneoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TorneoMaxAggregateInputType
  }

  export type GetTorneoAggregateType<T extends TorneoAggregateArgs> = {
        [P in keyof T & keyof AggregateTorneo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTorneo[P]>
      : GetScalarType<T[P], AggregateTorneo[P]>
  }




  export type TorneoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TorneoWhereInput
    orderBy?: TorneoOrderByWithAggregationInput | TorneoOrderByWithAggregationInput[]
    by: TorneoScalarFieldEnum[] | TorneoScalarFieldEnum
    having?: TorneoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TorneoCountAggregateInputType | true
    _avg?: TorneoAvgAggregateInputType
    _sum?: TorneoSumAggregateInputType
    _min?: TorneoMinAggregateInputType
    _max?: TorneoMaxAggregateInputType
  }

  export type TorneoGroupByOutputType = {
    id_torneo: number
    nombre: string
    fecha_inicio: Date
    reglas: string | null
    premios: string | null
    tipo_torneo: string | null
    creadorId: number
    _count: TorneoCountAggregateOutputType | null
    _avg: TorneoAvgAggregateOutputType | null
    _sum: TorneoSumAggregateOutputType | null
    _min: TorneoMinAggregateOutputType | null
    _max: TorneoMaxAggregateOutputType | null
  }

  type GetTorneoGroupByPayload<T extends TorneoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TorneoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TorneoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TorneoGroupByOutputType[P]>
            : GetScalarType<T[P], TorneoGroupByOutputType[P]>
        }
      >
    >


  export type TorneoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_torneo?: boolean
    nombre?: boolean
    fecha_inicio?: boolean
    reglas?: boolean
    premios?: boolean
    tipo_torneo?: boolean
    creadorId?: boolean
    creador?: boolean | UsuarioDefaultArgs<ExtArgs>
    partidas?: boolean | Torneo$partidasArgs<ExtArgs>
    inscripciones?: boolean | Torneo$inscripcionesArgs<ExtArgs>
    _count?: boolean | TorneoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["torneo"]>



  export type TorneoSelectScalar = {
    id_torneo?: boolean
    nombre?: boolean
    fecha_inicio?: boolean
    reglas?: boolean
    premios?: boolean
    tipo_torneo?: boolean
    creadorId?: boolean
  }

  export type TorneoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_torneo" | "nombre" | "fecha_inicio" | "reglas" | "premios" | "tipo_torneo" | "creadorId", ExtArgs["result"]["torneo"]>
  export type TorneoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creador?: boolean | UsuarioDefaultArgs<ExtArgs>
    partidas?: boolean | Torneo$partidasArgs<ExtArgs>
    inscripciones?: boolean | Torneo$inscripcionesArgs<ExtArgs>
    _count?: boolean | TorneoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TorneoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Torneo"
    objects: {
      creador: Prisma.$UsuarioPayload<ExtArgs>
      partidas: Prisma.$PartidaPayload<ExtArgs>[]
      inscripciones: Prisma.$InscripcionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_torneo: number
      nombre: string
      fecha_inicio: Date
      reglas: string | null
      premios: string | null
      tipo_torneo: string | null
      creadorId: number
    }, ExtArgs["result"]["torneo"]>
    composites: {}
  }

  type TorneoGetPayload<S extends boolean | null | undefined | TorneoDefaultArgs> = $Result.GetResult<Prisma.$TorneoPayload, S>

  type TorneoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TorneoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TorneoCountAggregateInputType | true
    }

  export interface TorneoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Torneo'], meta: { name: 'Torneo' } }
    /**
     * Find zero or one Torneo that matches the filter.
     * @param {TorneoFindUniqueArgs} args - Arguments to find a Torneo
     * @example
     * // Get one Torneo
     * const torneo = await prisma.torneo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TorneoFindUniqueArgs>(args: SelectSubset<T, TorneoFindUniqueArgs<ExtArgs>>): Prisma__TorneoClient<$Result.GetResult<Prisma.$TorneoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Torneo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TorneoFindUniqueOrThrowArgs} args - Arguments to find a Torneo
     * @example
     * // Get one Torneo
     * const torneo = await prisma.torneo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TorneoFindUniqueOrThrowArgs>(args: SelectSubset<T, TorneoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TorneoClient<$Result.GetResult<Prisma.$TorneoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Torneo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TorneoFindFirstArgs} args - Arguments to find a Torneo
     * @example
     * // Get one Torneo
     * const torneo = await prisma.torneo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TorneoFindFirstArgs>(args?: SelectSubset<T, TorneoFindFirstArgs<ExtArgs>>): Prisma__TorneoClient<$Result.GetResult<Prisma.$TorneoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Torneo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TorneoFindFirstOrThrowArgs} args - Arguments to find a Torneo
     * @example
     * // Get one Torneo
     * const torneo = await prisma.torneo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TorneoFindFirstOrThrowArgs>(args?: SelectSubset<T, TorneoFindFirstOrThrowArgs<ExtArgs>>): Prisma__TorneoClient<$Result.GetResult<Prisma.$TorneoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Torneos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TorneoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Torneos
     * const torneos = await prisma.torneo.findMany()
     * 
     * // Get first 10 Torneos
     * const torneos = await prisma.torneo.findMany({ take: 10 })
     * 
     * // Only select the `id_torneo`
     * const torneoWithId_torneoOnly = await prisma.torneo.findMany({ select: { id_torneo: true } })
     * 
     */
    findMany<T extends TorneoFindManyArgs>(args?: SelectSubset<T, TorneoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TorneoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Torneo.
     * @param {TorneoCreateArgs} args - Arguments to create a Torneo.
     * @example
     * // Create one Torneo
     * const Torneo = await prisma.torneo.create({
     *   data: {
     *     // ... data to create a Torneo
     *   }
     * })
     * 
     */
    create<T extends TorneoCreateArgs>(args: SelectSubset<T, TorneoCreateArgs<ExtArgs>>): Prisma__TorneoClient<$Result.GetResult<Prisma.$TorneoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Torneos.
     * @param {TorneoCreateManyArgs} args - Arguments to create many Torneos.
     * @example
     * // Create many Torneos
     * const torneo = await prisma.torneo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TorneoCreateManyArgs>(args?: SelectSubset<T, TorneoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Torneo.
     * @param {TorneoDeleteArgs} args - Arguments to delete one Torneo.
     * @example
     * // Delete one Torneo
     * const Torneo = await prisma.torneo.delete({
     *   where: {
     *     // ... filter to delete one Torneo
     *   }
     * })
     * 
     */
    delete<T extends TorneoDeleteArgs>(args: SelectSubset<T, TorneoDeleteArgs<ExtArgs>>): Prisma__TorneoClient<$Result.GetResult<Prisma.$TorneoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Torneo.
     * @param {TorneoUpdateArgs} args - Arguments to update one Torneo.
     * @example
     * // Update one Torneo
     * const torneo = await prisma.torneo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TorneoUpdateArgs>(args: SelectSubset<T, TorneoUpdateArgs<ExtArgs>>): Prisma__TorneoClient<$Result.GetResult<Prisma.$TorneoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Torneos.
     * @param {TorneoDeleteManyArgs} args - Arguments to filter Torneos to delete.
     * @example
     * // Delete a few Torneos
     * const { count } = await prisma.torneo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TorneoDeleteManyArgs>(args?: SelectSubset<T, TorneoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Torneos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TorneoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Torneos
     * const torneo = await prisma.torneo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TorneoUpdateManyArgs>(args: SelectSubset<T, TorneoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Torneo.
     * @param {TorneoUpsertArgs} args - Arguments to update or create a Torneo.
     * @example
     * // Update or create a Torneo
     * const torneo = await prisma.torneo.upsert({
     *   create: {
     *     // ... data to create a Torneo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Torneo we want to update
     *   }
     * })
     */
    upsert<T extends TorneoUpsertArgs>(args: SelectSubset<T, TorneoUpsertArgs<ExtArgs>>): Prisma__TorneoClient<$Result.GetResult<Prisma.$TorneoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Torneos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TorneoCountArgs} args - Arguments to filter Torneos to count.
     * @example
     * // Count the number of Torneos
     * const count = await prisma.torneo.count({
     *   where: {
     *     // ... the filter for the Torneos we want to count
     *   }
     * })
    **/
    count<T extends TorneoCountArgs>(
      args?: Subset<T, TorneoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TorneoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Torneo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TorneoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TorneoAggregateArgs>(args: Subset<T, TorneoAggregateArgs>): Prisma.PrismaPromise<GetTorneoAggregateType<T>>

    /**
     * Group by Torneo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TorneoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TorneoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TorneoGroupByArgs['orderBy'] }
        : { orderBy?: TorneoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TorneoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTorneoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Torneo model
   */
  readonly fields: TorneoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Torneo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TorneoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creador<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    partidas<T extends Torneo$partidasArgs<ExtArgs> = {}>(args?: Subset<T, Torneo$partidasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    inscripciones<T extends Torneo$inscripcionesArgs<ExtArgs> = {}>(args?: Subset<T, Torneo$inscripcionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InscripcionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Torneo model
   */
  interface TorneoFieldRefs {
    readonly id_torneo: FieldRef<"Torneo", 'Int'>
    readonly nombre: FieldRef<"Torneo", 'String'>
    readonly fecha_inicio: FieldRef<"Torneo", 'DateTime'>
    readonly reglas: FieldRef<"Torneo", 'String'>
    readonly premios: FieldRef<"Torneo", 'String'>
    readonly tipo_torneo: FieldRef<"Torneo", 'String'>
    readonly creadorId: FieldRef<"Torneo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Torneo findUnique
   */
  export type TorneoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Torneo
     */
    select?: TorneoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Torneo
     */
    omit?: TorneoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TorneoInclude<ExtArgs> | null
    /**
     * Filter, which Torneo to fetch.
     */
    where: TorneoWhereUniqueInput
  }

  /**
   * Torneo findUniqueOrThrow
   */
  export type TorneoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Torneo
     */
    select?: TorneoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Torneo
     */
    omit?: TorneoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TorneoInclude<ExtArgs> | null
    /**
     * Filter, which Torneo to fetch.
     */
    where: TorneoWhereUniqueInput
  }

  /**
   * Torneo findFirst
   */
  export type TorneoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Torneo
     */
    select?: TorneoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Torneo
     */
    omit?: TorneoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TorneoInclude<ExtArgs> | null
    /**
     * Filter, which Torneo to fetch.
     */
    where?: TorneoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Torneos to fetch.
     */
    orderBy?: TorneoOrderByWithRelationInput | TorneoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Torneos.
     */
    cursor?: TorneoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Torneos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Torneos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Torneos.
     */
    distinct?: TorneoScalarFieldEnum | TorneoScalarFieldEnum[]
  }

  /**
   * Torneo findFirstOrThrow
   */
  export type TorneoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Torneo
     */
    select?: TorneoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Torneo
     */
    omit?: TorneoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TorneoInclude<ExtArgs> | null
    /**
     * Filter, which Torneo to fetch.
     */
    where?: TorneoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Torneos to fetch.
     */
    orderBy?: TorneoOrderByWithRelationInput | TorneoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Torneos.
     */
    cursor?: TorneoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Torneos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Torneos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Torneos.
     */
    distinct?: TorneoScalarFieldEnum | TorneoScalarFieldEnum[]
  }

  /**
   * Torneo findMany
   */
  export type TorneoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Torneo
     */
    select?: TorneoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Torneo
     */
    omit?: TorneoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TorneoInclude<ExtArgs> | null
    /**
     * Filter, which Torneos to fetch.
     */
    where?: TorneoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Torneos to fetch.
     */
    orderBy?: TorneoOrderByWithRelationInput | TorneoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Torneos.
     */
    cursor?: TorneoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Torneos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Torneos.
     */
    skip?: number
    distinct?: TorneoScalarFieldEnum | TorneoScalarFieldEnum[]
  }

  /**
   * Torneo create
   */
  export type TorneoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Torneo
     */
    select?: TorneoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Torneo
     */
    omit?: TorneoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TorneoInclude<ExtArgs> | null
    /**
     * The data needed to create a Torneo.
     */
    data: XOR<TorneoCreateInput, TorneoUncheckedCreateInput>
  }

  /**
   * Torneo createMany
   */
  export type TorneoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Torneos.
     */
    data: TorneoCreateManyInput | TorneoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Torneo update
   */
  export type TorneoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Torneo
     */
    select?: TorneoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Torneo
     */
    omit?: TorneoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TorneoInclude<ExtArgs> | null
    /**
     * The data needed to update a Torneo.
     */
    data: XOR<TorneoUpdateInput, TorneoUncheckedUpdateInput>
    /**
     * Choose, which Torneo to update.
     */
    where: TorneoWhereUniqueInput
  }

  /**
   * Torneo updateMany
   */
  export type TorneoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Torneos.
     */
    data: XOR<TorneoUpdateManyMutationInput, TorneoUncheckedUpdateManyInput>
    /**
     * Filter which Torneos to update
     */
    where?: TorneoWhereInput
    /**
     * Limit how many Torneos to update.
     */
    limit?: number
  }

  /**
   * Torneo upsert
   */
  export type TorneoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Torneo
     */
    select?: TorneoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Torneo
     */
    omit?: TorneoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TorneoInclude<ExtArgs> | null
    /**
     * The filter to search for the Torneo to update in case it exists.
     */
    where: TorneoWhereUniqueInput
    /**
     * In case the Torneo found by the `where` argument doesn't exist, create a new Torneo with this data.
     */
    create: XOR<TorneoCreateInput, TorneoUncheckedCreateInput>
    /**
     * In case the Torneo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TorneoUpdateInput, TorneoUncheckedUpdateInput>
  }

  /**
   * Torneo delete
   */
  export type TorneoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Torneo
     */
    select?: TorneoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Torneo
     */
    omit?: TorneoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TorneoInclude<ExtArgs> | null
    /**
     * Filter which Torneo to delete.
     */
    where: TorneoWhereUniqueInput
  }

  /**
   * Torneo deleteMany
   */
  export type TorneoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Torneos to delete
     */
    where?: TorneoWhereInput
    /**
     * Limit how many Torneos to delete.
     */
    limit?: number
  }

  /**
   * Torneo.partidas
   */
  export type Torneo$partidasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partida
     */
    omit?: PartidaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    where?: PartidaWhereInput
    orderBy?: PartidaOrderByWithRelationInput | PartidaOrderByWithRelationInput[]
    cursor?: PartidaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartidaScalarFieldEnum | PartidaScalarFieldEnum[]
  }

  /**
   * Torneo.inscripciones
   */
  export type Torneo$inscripcionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inscripcion
     */
    select?: InscripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inscripcion
     */
    omit?: InscripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscripcionInclude<ExtArgs> | null
    where?: InscripcionWhereInput
    orderBy?: InscripcionOrderByWithRelationInput | InscripcionOrderByWithRelationInput[]
    cursor?: InscripcionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InscripcionScalarFieldEnum | InscripcionScalarFieldEnum[]
  }

  /**
   * Torneo without action
   */
  export type TorneoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Torneo
     */
    select?: TorneoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Torneo
     */
    omit?: TorneoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TorneoInclude<ExtArgs> | null
  }


  /**
   * Model Partida
   */

  export type AggregatePartida = {
    _count: PartidaCountAggregateOutputType | null
    _avg: PartidaAvgAggregateOutputType | null
    _sum: PartidaSumAggregateOutputType | null
    _min: PartidaMinAggregateOutputType | null
    _max: PartidaMaxAggregateOutputType | null
  }

  export type PartidaAvgAggregateOutputType = {
    id_partida: number | null
    torneoId: number | null
  }

  export type PartidaSumAggregateOutputType = {
    id_partida: number | null
    torneoId: number | null
  }

  export type PartidaMinAggregateOutputType = {
    id_partida: number | null
    resultado: string | null
    fecha_partida: Date | null
    torneoId: number | null
  }

  export type PartidaMaxAggregateOutputType = {
    id_partida: number | null
    resultado: string | null
    fecha_partida: Date | null
    torneoId: number | null
  }

  export type PartidaCountAggregateOutputType = {
    id_partida: number
    resultado: number
    fecha_partida: number
    torneoId: number
    _all: number
  }


  export type PartidaAvgAggregateInputType = {
    id_partida?: true
    torneoId?: true
  }

  export type PartidaSumAggregateInputType = {
    id_partida?: true
    torneoId?: true
  }

  export type PartidaMinAggregateInputType = {
    id_partida?: true
    resultado?: true
    fecha_partida?: true
    torneoId?: true
  }

  export type PartidaMaxAggregateInputType = {
    id_partida?: true
    resultado?: true
    fecha_partida?: true
    torneoId?: true
  }

  export type PartidaCountAggregateInputType = {
    id_partida?: true
    resultado?: true
    fecha_partida?: true
    torneoId?: true
    _all?: true
  }

  export type PartidaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partida to aggregate.
     */
    where?: PartidaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partidas to fetch.
     */
    orderBy?: PartidaOrderByWithRelationInput | PartidaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartidaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partidas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partidas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Partidas
    **/
    _count?: true | PartidaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PartidaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PartidaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartidaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartidaMaxAggregateInputType
  }

  export type GetPartidaAggregateType<T extends PartidaAggregateArgs> = {
        [P in keyof T & keyof AggregatePartida]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartida[P]>
      : GetScalarType<T[P], AggregatePartida[P]>
  }




  export type PartidaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartidaWhereInput
    orderBy?: PartidaOrderByWithAggregationInput | PartidaOrderByWithAggregationInput[]
    by: PartidaScalarFieldEnum[] | PartidaScalarFieldEnum
    having?: PartidaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartidaCountAggregateInputType | true
    _avg?: PartidaAvgAggregateInputType
    _sum?: PartidaSumAggregateInputType
    _min?: PartidaMinAggregateInputType
    _max?: PartidaMaxAggregateInputType
  }

  export type PartidaGroupByOutputType = {
    id_partida: number
    resultado: string | null
    fecha_partida: Date
    torneoId: number
    _count: PartidaCountAggregateOutputType | null
    _avg: PartidaAvgAggregateOutputType | null
    _sum: PartidaSumAggregateOutputType | null
    _min: PartidaMinAggregateOutputType | null
    _max: PartidaMaxAggregateOutputType | null
  }

  type GetPartidaGroupByPayload<T extends PartidaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartidaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartidaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartidaGroupByOutputType[P]>
            : GetScalarType<T[P], PartidaGroupByOutputType[P]>
        }
      >
    >


  export type PartidaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_partida?: boolean
    resultado?: boolean
    fecha_partida?: boolean
    torneoId?: boolean
    torneo?: boolean | TorneoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partida"]>



  export type PartidaSelectScalar = {
    id_partida?: boolean
    resultado?: boolean
    fecha_partida?: boolean
    torneoId?: boolean
  }

  export type PartidaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_partida" | "resultado" | "fecha_partida" | "torneoId", ExtArgs["result"]["partida"]>
  export type PartidaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    torneo?: boolean | TorneoDefaultArgs<ExtArgs>
  }

  export type $PartidaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Partida"
    objects: {
      torneo: Prisma.$TorneoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_partida: number
      resultado: string | null
      fecha_partida: Date
      torneoId: number
    }, ExtArgs["result"]["partida"]>
    composites: {}
  }

  type PartidaGetPayload<S extends boolean | null | undefined | PartidaDefaultArgs> = $Result.GetResult<Prisma.$PartidaPayload, S>

  type PartidaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PartidaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PartidaCountAggregateInputType | true
    }

  export interface PartidaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Partida'], meta: { name: 'Partida' } }
    /**
     * Find zero or one Partida that matches the filter.
     * @param {PartidaFindUniqueArgs} args - Arguments to find a Partida
     * @example
     * // Get one Partida
     * const partida = await prisma.partida.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartidaFindUniqueArgs>(args: SelectSubset<T, PartidaFindUniqueArgs<ExtArgs>>): Prisma__PartidaClient<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Partida that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PartidaFindUniqueOrThrowArgs} args - Arguments to find a Partida
     * @example
     * // Get one Partida
     * const partida = await prisma.partida.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartidaFindUniqueOrThrowArgs>(args: SelectSubset<T, PartidaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartidaClient<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Partida that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidaFindFirstArgs} args - Arguments to find a Partida
     * @example
     * // Get one Partida
     * const partida = await prisma.partida.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartidaFindFirstArgs>(args?: SelectSubset<T, PartidaFindFirstArgs<ExtArgs>>): Prisma__PartidaClient<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Partida that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidaFindFirstOrThrowArgs} args - Arguments to find a Partida
     * @example
     * // Get one Partida
     * const partida = await prisma.partida.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartidaFindFirstOrThrowArgs>(args?: SelectSubset<T, PartidaFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartidaClient<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Partidas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Partidas
     * const partidas = await prisma.partida.findMany()
     * 
     * // Get first 10 Partidas
     * const partidas = await prisma.partida.findMany({ take: 10 })
     * 
     * // Only select the `id_partida`
     * const partidaWithId_partidaOnly = await prisma.partida.findMany({ select: { id_partida: true } })
     * 
     */
    findMany<T extends PartidaFindManyArgs>(args?: SelectSubset<T, PartidaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Partida.
     * @param {PartidaCreateArgs} args - Arguments to create a Partida.
     * @example
     * // Create one Partida
     * const Partida = await prisma.partida.create({
     *   data: {
     *     // ... data to create a Partida
     *   }
     * })
     * 
     */
    create<T extends PartidaCreateArgs>(args: SelectSubset<T, PartidaCreateArgs<ExtArgs>>): Prisma__PartidaClient<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Partidas.
     * @param {PartidaCreateManyArgs} args - Arguments to create many Partidas.
     * @example
     * // Create many Partidas
     * const partida = await prisma.partida.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartidaCreateManyArgs>(args?: SelectSubset<T, PartidaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Partida.
     * @param {PartidaDeleteArgs} args - Arguments to delete one Partida.
     * @example
     * // Delete one Partida
     * const Partida = await prisma.partida.delete({
     *   where: {
     *     // ... filter to delete one Partida
     *   }
     * })
     * 
     */
    delete<T extends PartidaDeleteArgs>(args: SelectSubset<T, PartidaDeleteArgs<ExtArgs>>): Prisma__PartidaClient<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Partida.
     * @param {PartidaUpdateArgs} args - Arguments to update one Partida.
     * @example
     * // Update one Partida
     * const partida = await prisma.partida.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartidaUpdateArgs>(args: SelectSubset<T, PartidaUpdateArgs<ExtArgs>>): Prisma__PartidaClient<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Partidas.
     * @param {PartidaDeleteManyArgs} args - Arguments to filter Partidas to delete.
     * @example
     * // Delete a few Partidas
     * const { count } = await prisma.partida.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartidaDeleteManyArgs>(args?: SelectSubset<T, PartidaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partidas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Partidas
     * const partida = await prisma.partida.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartidaUpdateManyArgs>(args: SelectSubset<T, PartidaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Partida.
     * @param {PartidaUpsertArgs} args - Arguments to update or create a Partida.
     * @example
     * // Update or create a Partida
     * const partida = await prisma.partida.upsert({
     *   create: {
     *     // ... data to create a Partida
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Partida we want to update
     *   }
     * })
     */
    upsert<T extends PartidaUpsertArgs>(args: SelectSubset<T, PartidaUpsertArgs<ExtArgs>>): Prisma__PartidaClient<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Partidas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidaCountArgs} args - Arguments to filter Partidas to count.
     * @example
     * // Count the number of Partidas
     * const count = await prisma.partida.count({
     *   where: {
     *     // ... the filter for the Partidas we want to count
     *   }
     * })
    **/
    count<T extends PartidaCountArgs>(
      args?: Subset<T, PartidaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartidaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Partida.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartidaAggregateArgs>(args: Subset<T, PartidaAggregateArgs>): Prisma.PrismaPromise<GetPartidaAggregateType<T>>

    /**
     * Group by Partida.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartidaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartidaGroupByArgs['orderBy'] }
        : { orderBy?: PartidaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartidaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartidaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Partida model
   */
  readonly fields: PartidaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Partida.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartidaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    torneo<T extends TorneoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TorneoDefaultArgs<ExtArgs>>): Prisma__TorneoClient<$Result.GetResult<Prisma.$TorneoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Partida model
   */
  interface PartidaFieldRefs {
    readonly id_partida: FieldRef<"Partida", 'Int'>
    readonly resultado: FieldRef<"Partida", 'String'>
    readonly fecha_partida: FieldRef<"Partida", 'DateTime'>
    readonly torneoId: FieldRef<"Partida", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Partida findUnique
   */
  export type PartidaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partida
     */
    omit?: PartidaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    /**
     * Filter, which Partida to fetch.
     */
    where: PartidaWhereUniqueInput
  }

  /**
   * Partida findUniqueOrThrow
   */
  export type PartidaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partida
     */
    omit?: PartidaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    /**
     * Filter, which Partida to fetch.
     */
    where: PartidaWhereUniqueInput
  }

  /**
   * Partida findFirst
   */
  export type PartidaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partida
     */
    omit?: PartidaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    /**
     * Filter, which Partida to fetch.
     */
    where?: PartidaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partidas to fetch.
     */
    orderBy?: PartidaOrderByWithRelationInput | PartidaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partidas.
     */
    cursor?: PartidaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partidas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partidas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partidas.
     */
    distinct?: PartidaScalarFieldEnum | PartidaScalarFieldEnum[]
  }

  /**
   * Partida findFirstOrThrow
   */
  export type PartidaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partida
     */
    omit?: PartidaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    /**
     * Filter, which Partida to fetch.
     */
    where?: PartidaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partidas to fetch.
     */
    orderBy?: PartidaOrderByWithRelationInput | PartidaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partidas.
     */
    cursor?: PartidaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partidas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partidas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partidas.
     */
    distinct?: PartidaScalarFieldEnum | PartidaScalarFieldEnum[]
  }

  /**
   * Partida findMany
   */
  export type PartidaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partida
     */
    omit?: PartidaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    /**
     * Filter, which Partidas to fetch.
     */
    where?: PartidaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partidas to fetch.
     */
    orderBy?: PartidaOrderByWithRelationInput | PartidaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Partidas.
     */
    cursor?: PartidaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partidas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partidas.
     */
    skip?: number
    distinct?: PartidaScalarFieldEnum | PartidaScalarFieldEnum[]
  }

  /**
   * Partida create
   */
  export type PartidaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partida
     */
    omit?: PartidaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    /**
     * The data needed to create a Partida.
     */
    data: XOR<PartidaCreateInput, PartidaUncheckedCreateInput>
  }

  /**
   * Partida createMany
   */
  export type PartidaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Partidas.
     */
    data: PartidaCreateManyInput | PartidaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Partida update
   */
  export type PartidaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partida
     */
    omit?: PartidaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    /**
     * The data needed to update a Partida.
     */
    data: XOR<PartidaUpdateInput, PartidaUncheckedUpdateInput>
    /**
     * Choose, which Partida to update.
     */
    where: PartidaWhereUniqueInput
  }

  /**
   * Partida updateMany
   */
  export type PartidaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Partidas.
     */
    data: XOR<PartidaUpdateManyMutationInput, PartidaUncheckedUpdateManyInput>
    /**
     * Filter which Partidas to update
     */
    where?: PartidaWhereInput
    /**
     * Limit how many Partidas to update.
     */
    limit?: number
  }

  /**
   * Partida upsert
   */
  export type PartidaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partida
     */
    omit?: PartidaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    /**
     * The filter to search for the Partida to update in case it exists.
     */
    where: PartidaWhereUniqueInput
    /**
     * In case the Partida found by the `where` argument doesn't exist, create a new Partida with this data.
     */
    create: XOR<PartidaCreateInput, PartidaUncheckedCreateInput>
    /**
     * In case the Partida was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartidaUpdateInput, PartidaUncheckedUpdateInput>
  }

  /**
   * Partida delete
   */
  export type PartidaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partida
     */
    omit?: PartidaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    /**
     * Filter which Partida to delete.
     */
    where: PartidaWhereUniqueInput
  }

  /**
   * Partida deleteMany
   */
  export type PartidaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partidas to delete
     */
    where?: PartidaWhereInput
    /**
     * Limit how many Partidas to delete.
     */
    limit?: number
  }

  /**
   * Partida without action
   */
  export type PartidaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partida
     */
    omit?: PartidaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
  }


  /**
   * Model Inscripcion
   */

  export type AggregateInscripcion = {
    _count: InscripcionCountAggregateOutputType | null
    _avg: InscripcionAvgAggregateOutputType | null
    _sum: InscripcionSumAggregateOutputType | null
    _min: InscripcionMinAggregateOutputType | null
    _max: InscripcionMaxAggregateOutputType | null
  }

  export type InscripcionAvgAggregateOutputType = {
    id_inscripcion: number | null
    usuarioId: number | null
    torneoId: number | null
  }

  export type InscripcionSumAggregateOutputType = {
    id_inscripcion: number | null
    usuarioId: number | null
    torneoId: number | null
  }

  export type InscripcionMinAggregateOutputType = {
    id_inscripcion: number | null
    usuarioId: number | null
    torneoId: number | null
    fecha_inscripcion: Date | null
  }

  export type InscripcionMaxAggregateOutputType = {
    id_inscripcion: number | null
    usuarioId: number | null
    torneoId: number | null
    fecha_inscripcion: Date | null
  }

  export type InscripcionCountAggregateOutputType = {
    id_inscripcion: number
    usuarioId: number
    torneoId: number
    fecha_inscripcion: number
    _all: number
  }


  export type InscripcionAvgAggregateInputType = {
    id_inscripcion?: true
    usuarioId?: true
    torneoId?: true
  }

  export type InscripcionSumAggregateInputType = {
    id_inscripcion?: true
    usuarioId?: true
    torneoId?: true
  }

  export type InscripcionMinAggregateInputType = {
    id_inscripcion?: true
    usuarioId?: true
    torneoId?: true
    fecha_inscripcion?: true
  }

  export type InscripcionMaxAggregateInputType = {
    id_inscripcion?: true
    usuarioId?: true
    torneoId?: true
    fecha_inscripcion?: true
  }

  export type InscripcionCountAggregateInputType = {
    id_inscripcion?: true
    usuarioId?: true
    torneoId?: true
    fecha_inscripcion?: true
    _all?: true
  }

  export type InscripcionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inscripcion to aggregate.
     */
    where?: InscripcionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inscripcions to fetch.
     */
    orderBy?: InscripcionOrderByWithRelationInput | InscripcionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InscripcionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inscripcions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inscripcions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Inscripcions
    **/
    _count?: true | InscripcionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InscripcionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InscripcionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InscripcionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InscripcionMaxAggregateInputType
  }

  export type GetInscripcionAggregateType<T extends InscripcionAggregateArgs> = {
        [P in keyof T & keyof AggregateInscripcion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInscripcion[P]>
      : GetScalarType<T[P], AggregateInscripcion[P]>
  }




  export type InscripcionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InscripcionWhereInput
    orderBy?: InscripcionOrderByWithAggregationInput | InscripcionOrderByWithAggregationInput[]
    by: InscripcionScalarFieldEnum[] | InscripcionScalarFieldEnum
    having?: InscripcionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InscripcionCountAggregateInputType | true
    _avg?: InscripcionAvgAggregateInputType
    _sum?: InscripcionSumAggregateInputType
    _min?: InscripcionMinAggregateInputType
    _max?: InscripcionMaxAggregateInputType
  }

  export type InscripcionGroupByOutputType = {
    id_inscripcion: number
    usuarioId: number
    torneoId: number
    fecha_inscripcion: Date
    _count: InscripcionCountAggregateOutputType | null
    _avg: InscripcionAvgAggregateOutputType | null
    _sum: InscripcionSumAggregateOutputType | null
    _min: InscripcionMinAggregateOutputType | null
    _max: InscripcionMaxAggregateOutputType | null
  }

  type GetInscripcionGroupByPayload<T extends InscripcionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InscripcionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InscripcionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InscripcionGroupByOutputType[P]>
            : GetScalarType<T[P], InscripcionGroupByOutputType[P]>
        }
      >
    >


  export type InscripcionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_inscripcion?: boolean
    usuarioId?: boolean
    torneoId?: boolean
    fecha_inscripcion?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    torneo?: boolean | TorneoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inscripcion"]>



  export type InscripcionSelectScalar = {
    id_inscripcion?: boolean
    usuarioId?: boolean
    torneoId?: boolean
    fecha_inscripcion?: boolean
  }

  export type InscripcionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_inscripcion" | "usuarioId" | "torneoId" | "fecha_inscripcion", ExtArgs["result"]["inscripcion"]>
  export type InscripcionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    torneo?: boolean | TorneoDefaultArgs<ExtArgs>
  }

  export type $InscripcionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Inscripcion"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      torneo: Prisma.$TorneoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_inscripcion: number
      usuarioId: number
      torneoId: number
      fecha_inscripcion: Date
    }, ExtArgs["result"]["inscripcion"]>
    composites: {}
  }

  type InscripcionGetPayload<S extends boolean | null | undefined | InscripcionDefaultArgs> = $Result.GetResult<Prisma.$InscripcionPayload, S>

  type InscripcionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InscripcionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InscripcionCountAggregateInputType | true
    }

  export interface InscripcionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Inscripcion'], meta: { name: 'Inscripcion' } }
    /**
     * Find zero or one Inscripcion that matches the filter.
     * @param {InscripcionFindUniqueArgs} args - Arguments to find a Inscripcion
     * @example
     * // Get one Inscripcion
     * const inscripcion = await prisma.inscripcion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InscripcionFindUniqueArgs>(args: SelectSubset<T, InscripcionFindUniqueArgs<ExtArgs>>): Prisma__InscripcionClient<$Result.GetResult<Prisma.$InscripcionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Inscripcion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InscripcionFindUniqueOrThrowArgs} args - Arguments to find a Inscripcion
     * @example
     * // Get one Inscripcion
     * const inscripcion = await prisma.inscripcion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InscripcionFindUniqueOrThrowArgs>(args: SelectSubset<T, InscripcionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InscripcionClient<$Result.GetResult<Prisma.$InscripcionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Inscripcion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscripcionFindFirstArgs} args - Arguments to find a Inscripcion
     * @example
     * // Get one Inscripcion
     * const inscripcion = await prisma.inscripcion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InscripcionFindFirstArgs>(args?: SelectSubset<T, InscripcionFindFirstArgs<ExtArgs>>): Prisma__InscripcionClient<$Result.GetResult<Prisma.$InscripcionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Inscripcion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscripcionFindFirstOrThrowArgs} args - Arguments to find a Inscripcion
     * @example
     * // Get one Inscripcion
     * const inscripcion = await prisma.inscripcion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InscripcionFindFirstOrThrowArgs>(args?: SelectSubset<T, InscripcionFindFirstOrThrowArgs<ExtArgs>>): Prisma__InscripcionClient<$Result.GetResult<Prisma.$InscripcionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Inscripcions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscripcionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inscripcions
     * const inscripcions = await prisma.inscripcion.findMany()
     * 
     * // Get first 10 Inscripcions
     * const inscripcions = await prisma.inscripcion.findMany({ take: 10 })
     * 
     * // Only select the `id_inscripcion`
     * const inscripcionWithId_inscripcionOnly = await prisma.inscripcion.findMany({ select: { id_inscripcion: true } })
     * 
     */
    findMany<T extends InscripcionFindManyArgs>(args?: SelectSubset<T, InscripcionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InscripcionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Inscripcion.
     * @param {InscripcionCreateArgs} args - Arguments to create a Inscripcion.
     * @example
     * // Create one Inscripcion
     * const Inscripcion = await prisma.inscripcion.create({
     *   data: {
     *     // ... data to create a Inscripcion
     *   }
     * })
     * 
     */
    create<T extends InscripcionCreateArgs>(args: SelectSubset<T, InscripcionCreateArgs<ExtArgs>>): Prisma__InscripcionClient<$Result.GetResult<Prisma.$InscripcionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Inscripcions.
     * @param {InscripcionCreateManyArgs} args - Arguments to create many Inscripcions.
     * @example
     * // Create many Inscripcions
     * const inscripcion = await prisma.inscripcion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InscripcionCreateManyArgs>(args?: SelectSubset<T, InscripcionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Inscripcion.
     * @param {InscripcionDeleteArgs} args - Arguments to delete one Inscripcion.
     * @example
     * // Delete one Inscripcion
     * const Inscripcion = await prisma.inscripcion.delete({
     *   where: {
     *     // ... filter to delete one Inscripcion
     *   }
     * })
     * 
     */
    delete<T extends InscripcionDeleteArgs>(args: SelectSubset<T, InscripcionDeleteArgs<ExtArgs>>): Prisma__InscripcionClient<$Result.GetResult<Prisma.$InscripcionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Inscripcion.
     * @param {InscripcionUpdateArgs} args - Arguments to update one Inscripcion.
     * @example
     * // Update one Inscripcion
     * const inscripcion = await prisma.inscripcion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InscripcionUpdateArgs>(args: SelectSubset<T, InscripcionUpdateArgs<ExtArgs>>): Prisma__InscripcionClient<$Result.GetResult<Prisma.$InscripcionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Inscripcions.
     * @param {InscripcionDeleteManyArgs} args - Arguments to filter Inscripcions to delete.
     * @example
     * // Delete a few Inscripcions
     * const { count } = await prisma.inscripcion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InscripcionDeleteManyArgs>(args?: SelectSubset<T, InscripcionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inscripcions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscripcionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inscripcions
     * const inscripcion = await prisma.inscripcion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InscripcionUpdateManyArgs>(args: SelectSubset<T, InscripcionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Inscripcion.
     * @param {InscripcionUpsertArgs} args - Arguments to update or create a Inscripcion.
     * @example
     * // Update or create a Inscripcion
     * const inscripcion = await prisma.inscripcion.upsert({
     *   create: {
     *     // ... data to create a Inscripcion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inscripcion we want to update
     *   }
     * })
     */
    upsert<T extends InscripcionUpsertArgs>(args: SelectSubset<T, InscripcionUpsertArgs<ExtArgs>>): Prisma__InscripcionClient<$Result.GetResult<Prisma.$InscripcionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Inscripcions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscripcionCountArgs} args - Arguments to filter Inscripcions to count.
     * @example
     * // Count the number of Inscripcions
     * const count = await prisma.inscripcion.count({
     *   where: {
     *     // ... the filter for the Inscripcions we want to count
     *   }
     * })
    **/
    count<T extends InscripcionCountArgs>(
      args?: Subset<T, InscripcionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InscripcionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inscripcion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscripcionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InscripcionAggregateArgs>(args: Subset<T, InscripcionAggregateArgs>): Prisma.PrismaPromise<GetInscripcionAggregateType<T>>

    /**
     * Group by Inscripcion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscripcionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InscripcionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InscripcionGroupByArgs['orderBy'] }
        : { orderBy?: InscripcionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InscripcionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInscripcionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Inscripcion model
   */
  readonly fields: InscripcionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Inscripcion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InscripcionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    torneo<T extends TorneoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TorneoDefaultArgs<ExtArgs>>): Prisma__TorneoClient<$Result.GetResult<Prisma.$TorneoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Inscripcion model
   */
  interface InscripcionFieldRefs {
    readonly id_inscripcion: FieldRef<"Inscripcion", 'Int'>
    readonly usuarioId: FieldRef<"Inscripcion", 'Int'>
    readonly torneoId: FieldRef<"Inscripcion", 'Int'>
    readonly fecha_inscripcion: FieldRef<"Inscripcion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Inscripcion findUnique
   */
  export type InscripcionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inscripcion
     */
    select?: InscripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inscripcion
     */
    omit?: InscripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscripcionInclude<ExtArgs> | null
    /**
     * Filter, which Inscripcion to fetch.
     */
    where: InscripcionWhereUniqueInput
  }

  /**
   * Inscripcion findUniqueOrThrow
   */
  export type InscripcionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inscripcion
     */
    select?: InscripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inscripcion
     */
    omit?: InscripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscripcionInclude<ExtArgs> | null
    /**
     * Filter, which Inscripcion to fetch.
     */
    where: InscripcionWhereUniqueInput
  }

  /**
   * Inscripcion findFirst
   */
  export type InscripcionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inscripcion
     */
    select?: InscripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inscripcion
     */
    omit?: InscripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscripcionInclude<ExtArgs> | null
    /**
     * Filter, which Inscripcion to fetch.
     */
    where?: InscripcionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inscripcions to fetch.
     */
    orderBy?: InscripcionOrderByWithRelationInput | InscripcionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inscripcions.
     */
    cursor?: InscripcionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inscripcions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inscripcions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inscripcions.
     */
    distinct?: InscripcionScalarFieldEnum | InscripcionScalarFieldEnum[]
  }

  /**
   * Inscripcion findFirstOrThrow
   */
  export type InscripcionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inscripcion
     */
    select?: InscripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inscripcion
     */
    omit?: InscripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscripcionInclude<ExtArgs> | null
    /**
     * Filter, which Inscripcion to fetch.
     */
    where?: InscripcionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inscripcions to fetch.
     */
    orderBy?: InscripcionOrderByWithRelationInput | InscripcionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inscripcions.
     */
    cursor?: InscripcionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inscripcions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inscripcions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inscripcions.
     */
    distinct?: InscripcionScalarFieldEnum | InscripcionScalarFieldEnum[]
  }

  /**
   * Inscripcion findMany
   */
  export type InscripcionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inscripcion
     */
    select?: InscripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inscripcion
     */
    omit?: InscripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscripcionInclude<ExtArgs> | null
    /**
     * Filter, which Inscripcions to fetch.
     */
    where?: InscripcionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inscripcions to fetch.
     */
    orderBy?: InscripcionOrderByWithRelationInput | InscripcionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Inscripcions.
     */
    cursor?: InscripcionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inscripcions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inscripcions.
     */
    skip?: number
    distinct?: InscripcionScalarFieldEnum | InscripcionScalarFieldEnum[]
  }

  /**
   * Inscripcion create
   */
  export type InscripcionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inscripcion
     */
    select?: InscripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inscripcion
     */
    omit?: InscripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscripcionInclude<ExtArgs> | null
    /**
     * The data needed to create a Inscripcion.
     */
    data: XOR<InscripcionCreateInput, InscripcionUncheckedCreateInput>
  }

  /**
   * Inscripcion createMany
   */
  export type InscripcionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Inscripcions.
     */
    data: InscripcionCreateManyInput | InscripcionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Inscripcion update
   */
  export type InscripcionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inscripcion
     */
    select?: InscripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inscripcion
     */
    omit?: InscripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscripcionInclude<ExtArgs> | null
    /**
     * The data needed to update a Inscripcion.
     */
    data: XOR<InscripcionUpdateInput, InscripcionUncheckedUpdateInput>
    /**
     * Choose, which Inscripcion to update.
     */
    where: InscripcionWhereUniqueInput
  }

  /**
   * Inscripcion updateMany
   */
  export type InscripcionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Inscripcions.
     */
    data: XOR<InscripcionUpdateManyMutationInput, InscripcionUncheckedUpdateManyInput>
    /**
     * Filter which Inscripcions to update
     */
    where?: InscripcionWhereInput
    /**
     * Limit how many Inscripcions to update.
     */
    limit?: number
  }

  /**
   * Inscripcion upsert
   */
  export type InscripcionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inscripcion
     */
    select?: InscripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inscripcion
     */
    omit?: InscripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscripcionInclude<ExtArgs> | null
    /**
     * The filter to search for the Inscripcion to update in case it exists.
     */
    where: InscripcionWhereUniqueInput
    /**
     * In case the Inscripcion found by the `where` argument doesn't exist, create a new Inscripcion with this data.
     */
    create: XOR<InscripcionCreateInput, InscripcionUncheckedCreateInput>
    /**
     * In case the Inscripcion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InscripcionUpdateInput, InscripcionUncheckedUpdateInput>
  }

  /**
   * Inscripcion delete
   */
  export type InscripcionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inscripcion
     */
    select?: InscripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inscripcion
     */
    omit?: InscripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscripcionInclude<ExtArgs> | null
    /**
     * Filter which Inscripcion to delete.
     */
    where: InscripcionWhereUniqueInput
  }

  /**
   * Inscripcion deleteMany
   */
  export type InscripcionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inscripcions to delete
     */
    where?: InscripcionWhereInput
    /**
     * Limit how many Inscripcions to delete.
     */
    limit?: number
  }

  /**
   * Inscripcion without action
   */
  export type InscripcionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inscripcion
     */
    select?: InscripcionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inscripcion
     */
    omit?: InscripcionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscripcionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id_usuario: 'id_usuario',
    email: 'email',
    nombre: 'nombre',
    password: 'password',
    ELO: 'ELO'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const TorneoScalarFieldEnum: {
    id_torneo: 'id_torneo',
    nombre: 'nombre',
    fecha_inicio: 'fecha_inicio',
    reglas: 'reglas',
    premios: 'premios',
    tipo_torneo: 'tipo_torneo',
    creadorId: 'creadorId'
  };

  export type TorneoScalarFieldEnum = (typeof TorneoScalarFieldEnum)[keyof typeof TorneoScalarFieldEnum]


  export const PartidaScalarFieldEnum: {
    id_partida: 'id_partida',
    resultado: 'resultado',
    fecha_partida: 'fecha_partida',
    torneoId: 'torneoId'
  };

  export type PartidaScalarFieldEnum = (typeof PartidaScalarFieldEnum)[keyof typeof PartidaScalarFieldEnum]


  export const InscripcionScalarFieldEnum: {
    id_inscripcion: 'id_inscripcion',
    usuarioId: 'usuarioId',
    torneoId: 'torneoId',
    fecha_inscripcion: 'fecha_inscripcion'
  };

  export type InscripcionScalarFieldEnum = (typeof InscripcionScalarFieldEnum)[keyof typeof InscripcionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UsuarioOrderByRelevanceFieldEnum: {
    email: 'email',
    nombre: 'nombre',
    password: 'password'
  };

  export type UsuarioOrderByRelevanceFieldEnum = (typeof UsuarioOrderByRelevanceFieldEnum)[keyof typeof UsuarioOrderByRelevanceFieldEnum]


  export const TorneoOrderByRelevanceFieldEnum: {
    nombre: 'nombre',
    reglas: 'reglas',
    premios: 'premios',
    tipo_torneo: 'tipo_torneo'
  };

  export type TorneoOrderByRelevanceFieldEnum = (typeof TorneoOrderByRelevanceFieldEnum)[keyof typeof TorneoOrderByRelevanceFieldEnum]


  export const PartidaOrderByRelevanceFieldEnum: {
    resultado: 'resultado'
  };

  export type PartidaOrderByRelevanceFieldEnum = (typeof PartidaOrderByRelevanceFieldEnum)[keyof typeof PartidaOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id_usuario?: IntFilter<"Usuario"> | number
    email?: StringFilter<"Usuario"> | string
    nombre?: StringFilter<"Usuario"> | string
    password?: StringFilter<"Usuario"> | string
    ELO?: IntNullableFilter<"Usuario"> | number | null
    torneosCreados?: TorneoListRelationFilter
    inscripciones?: InscripcionListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id_usuario?: SortOrder
    email?: SortOrder
    nombre?: SortOrder
    password?: SortOrder
    ELO?: SortOrderInput | SortOrder
    torneosCreados?: TorneoOrderByRelationAggregateInput
    inscripciones?: InscripcionOrderByRelationAggregateInput
    _relevance?: UsuarioOrderByRelevanceInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id_usuario?: number
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nombre?: StringFilter<"Usuario"> | string
    password?: StringFilter<"Usuario"> | string
    ELO?: IntNullableFilter<"Usuario"> | number | null
    torneosCreados?: TorneoListRelationFilter
    inscripciones?: InscripcionListRelationFilter
  }, "id_usuario" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id_usuario?: SortOrder
    email?: SortOrder
    nombre?: SortOrder
    password?: SortOrder
    ELO?: SortOrderInput | SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id_usuario?: IntWithAggregatesFilter<"Usuario"> | number
    email?: StringWithAggregatesFilter<"Usuario"> | string
    nombre?: StringWithAggregatesFilter<"Usuario"> | string
    password?: StringWithAggregatesFilter<"Usuario"> | string
    ELO?: IntNullableWithAggregatesFilter<"Usuario"> | number | null
  }

  export type TorneoWhereInput = {
    AND?: TorneoWhereInput | TorneoWhereInput[]
    OR?: TorneoWhereInput[]
    NOT?: TorneoWhereInput | TorneoWhereInput[]
    id_torneo?: IntFilter<"Torneo"> | number
    nombre?: StringFilter<"Torneo"> | string
    fecha_inicio?: DateTimeFilter<"Torneo"> | Date | string
    reglas?: StringNullableFilter<"Torneo"> | string | null
    premios?: StringNullableFilter<"Torneo"> | string | null
    tipo_torneo?: StringNullableFilter<"Torneo"> | string | null
    creadorId?: IntFilter<"Torneo"> | number
    creador?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    partidas?: PartidaListRelationFilter
    inscripciones?: InscripcionListRelationFilter
  }

  export type TorneoOrderByWithRelationInput = {
    id_torneo?: SortOrder
    nombre?: SortOrder
    fecha_inicio?: SortOrder
    reglas?: SortOrderInput | SortOrder
    premios?: SortOrderInput | SortOrder
    tipo_torneo?: SortOrderInput | SortOrder
    creadorId?: SortOrder
    creador?: UsuarioOrderByWithRelationInput
    partidas?: PartidaOrderByRelationAggregateInput
    inscripciones?: InscripcionOrderByRelationAggregateInput
    _relevance?: TorneoOrderByRelevanceInput
  }

  export type TorneoWhereUniqueInput = Prisma.AtLeast<{
    id_torneo?: number
    AND?: TorneoWhereInput | TorneoWhereInput[]
    OR?: TorneoWhereInput[]
    NOT?: TorneoWhereInput | TorneoWhereInput[]
    nombre?: StringFilter<"Torneo"> | string
    fecha_inicio?: DateTimeFilter<"Torneo"> | Date | string
    reglas?: StringNullableFilter<"Torneo"> | string | null
    premios?: StringNullableFilter<"Torneo"> | string | null
    tipo_torneo?: StringNullableFilter<"Torneo"> | string | null
    creadorId?: IntFilter<"Torneo"> | number
    creador?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    partidas?: PartidaListRelationFilter
    inscripciones?: InscripcionListRelationFilter
  }, "id_torneo">

  export type TorneoOrderByWithAggregationInput = {
    id_torneo?: SortOrder
    nombre?: SortOrder
    fecha_inicio?: SortOrder
    reglas?: SortOrderInput | SortOrder
    premios?: SortOrderInput | SortOrder
    tipo_torneo?: SortOrderInput | SortOrder
    creadorId?: SortOrder
    _count?: TorneoCountOrderByAggregateInput
    _avg?: TorneoAvgOrderByAggregateInput
    _max?: TorneoMaxOrderByAggregateInput
    _min?: TorneoMinOrderByAggregateInput
    _sum?: TorneoSumOrderByAggregateInput
  }

  export type TorneoScalarWhereWithAggregatesInput = {
    AND?: TorneoScalarWhereWithAggregatesInput | TorneoScalarWhereWithAggregatesInput[]
    OR?: TorneoScalarWhereWithAggregatesInput[]
    NOT?: TorneoScalarWhereWithAggregatesInput | TorneoScalarWhereWithAggregatesInput[]
    id_torneo?: IntWithAggregatesFilter<"Torneo"> | number
    nombre?: StringWithAggregatesFilter<"Torneo"> | string
    fecha_inicio?: DateTimeWithAggregatesFilter<"Torneo"> | Date | string
    reglas?: StringNullableWithAggregatesFilter<"Torneo"> | string | null
    premios?: StringNullableWithAggregatesFilter<"Torneo"> | string | null
    tipo_torneo?: StringNullableWithAggregatesFilter<"Torneo"> | string | null
    creadorId?: IntWithAggregatesFilter<"Torneo"> | number
  }

  export type PartidaWhereInput = {
    AND?: PartidaWhereInput | PartidaWhereInput[]
    OR?: PartidaWhereInput[]
    NOT?: PartidaWhereInput | PartidaWhereInput[]
    id_partida?: IntFilter<"Partida"> | number
    resultado?: StringNullableFilter<"Partida"> | string | null
    fecha_partida?: DateTimeFilter<"Partida"> | Date | string
    torneoId?: IntFilter<"Partida"> | number
    torneo?: XOR<TorneoScalarRelationFilter, TorneoWhereInput>
  }

  export type PartidaOrderByWithRelationInput = {
    id_partida?: SortOrder
    resultado?: SortOrderInput | SortOrder
    fecha_partida?: SortOrder
    torneoId?: SortOrder
    torneo?: TorneoOrderByWithRelationInput
    _relevance?: PartidaOrderByRelevanceInput
  }

  export type PartidaWhereUniqueInput = Prisma.AtLeast<{
    id_partida?: number
    AND?: PartidaWhereInput | PartidaWhereInput[]
    OR?: PartidaWhereInput[]
    NOT?: PartidaWhereInput | PartidaWhereInput[]
    resultado?: StringNullableFilter<"Partida"> | string | null
    fecha_partida?: DateTimeFilter<"Partida"> | Date | string
    torneoId?: IntFilter<"Partida"> | number
    torneo?: XOR<TorneoScalarRelationFilter, TorneoWhereInput>
  }, "id_partida">

  export type PartidaOrderByWithAggregationInput = {
    id_partida?: SortOrder
    resultado?: SortOrderInput | SortOrder
    fecha_partida?: SortOrder
    torneoId?: SortOrder
    _count?: PartidaCountOrderByAggregateInput
    _avg?: PartidaAvgOrderByAggregateInput
    _max?: PartidaMaxOrderByAggregateInput
    _min?: PartidaMinOrderByAggregateInput
    _sum?: PartidaSumOrderByAggregateInput
  }

  export type PartidaScalarWhereWithAggregatesInput = {
    AND?: PartidaScalarWhereWithAggregatesInput | PartidaScalarWhereWithAggregatesInput[]
    OR?: PartidaScalarWhereWithAggregatesInput[]
    NOT?: PartidaScalarWhereWithAggregatesInput | PartidaScalarWhereWithAggregatesInput[]
    id_partida?: IntWithAggregatesFilter<"Partida"> | number
    resultado?: StringNullableWithAggregatesFilter<"Partida"> | string | null
    fecha_partida?: DateTimeWithAggregatesFilter<"Partida"> | Date | string
    torneoId?: IntWithAggregatesFilter<"Partida"> | number
  }

  export type InscripcionWhereInput = {
    AND?: InscripcionWhereInput | InscripcionWhereInput[]
    OR?: InscripcionWhereInput[]
    NOT?: InscripcionWhereInput | InscripcionWhereInput[]
    id_inscripcion?: IntFilter<"Inscripcion"> | number
    usuarioId?: IntFilter<"Inscripcion"> | number
    torneoId?: IntFilter<"Inscripcion"> | number
    fecha_inscripcion?: DateTimeFilter<"Inscripcion"> | Date | string
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    torneo?: XOR<TorneoScalarRelationFilter, TorneoWhereInput>
  }

  export type InscripcionOrderByWithRelationInput = {
    id_inscripcion?: SortOrder
    usuarioId?: SortOrder
    torneoId?: SortOrder
    fecha_inscripcion?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    torneo?: TorneoOrderByWithRelationInput
  }

  export type InscripcionWhereUniqueInput = Prisma.AtLeast<{
    id_inscripcion?: number
    usuarioId_torneoId?: InscripcionUsuarioIdTorneoIdCompoundUniqueInput
    AND?: InscripcionWhereInput | InscripcionWhereInput[]
    OR?: InscripcionWhereInput[]
    NOT?: InscripcionWhereInput | InscripcionWhereInput[]
    usuarioId?: IntFilter<"Inscripcion"> | number
    torneoId?: IntFilter<"Inscripcion"> | number
    fecha_inscripcion?: DateTimeFilter<"Inscripcion"> | Date | string
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    torneo?: XOR<TorneoScalarRelationFilter, TorneoWhereInput>
  }, "id_inscripcion" | "usuarioId_torneoId">

  export type InscripcionOrderByWithAggregationInput = {
    id_inscripcion?: SortOrder
    usuarioId?: SortOrder
    torneoId?: SortOrder
    fecha_inscripcion?: SortOrder
    _count?: InscripcionCountOrderByAggregateInput
    _avg?: InscripcionAvgOrderByAggregateInput
    _max?: InscripcionMaxOrderByAggregateInput
    _min?: InscripcionMinOrderByAggregateInput
    _sum?: InscripcionSumOrderByAggregateInput
  }

  export type InscripcionScalarWhereWithAggregatesInput = {
    AND?: InscripcionScalarWhereWithAggregatesInput | InscripcionScalarWhereWithAggregatesInput[]
    OR?: InscripcionScalarWhereWithAggregatesInput[]
    NOT?: InscripcionScalarWhereWithAggregatesInput | InscripcionScalarWhereWithAggregatesInput[]
    id_inscripcion?: IntWithAggregatesFilter<"Inscripcion"> | number
    usuarioId?: IntWithAggregatesFilter<"Inscripcion"> | number
    torneoId?: IntWithAggregatesFilter<"Inscripcion"> | number
    fecha_inscripcion?: DateTimeWithAggregatesFilter<"Inscripcion"> | Date | string
  }

  export type UsuarioCreateInput = {
    email: string
    nombre: string
    password: string
    ELO?: number | null
    torneosCreados?: TorneoCreateNestedManyWithoutCreadorInput
    inscripciones?: InscripcionCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id_usuario?: number
    email: string
    nombre: string
    password: string
    ELO?: number | null
    torneosCreados?: TorneoUncheckedCreateNestedManyWithoutCreadorInput
    inscripciones?: InscripcionUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ELO?: NullableIntFieldUpdateOperationsInput | number | null
    torneosCreados?: TorneoUpdateManyWithoutCreadorNestedInput
    inscripciones?: InscripcionUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ELO?: NullableIntFieldUpdateOperationsInput | number | null
    torneosCreados?: TorneoUncheckedUpdateManyWithoutCreadorNestedInput
    inscripciones?: InscripcionUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id_usuario?: number
    email: string
    nombre: string
    password: string
    ELO?: number | null
  }

  export type UsuarioUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ELO?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ELO?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TorneoCreateInput = {
    nombre: string
    fecha_inicio: Date | string
    reglas?: string | null
    premios?: string | null
    tipo_torneo?: string | null
    creador: UsuarioCreateNestedOneWithoutTorneosCreadosInput
    partidas?: PartidaCreateNestedManyWithoutTorneoInput
    inscripciones?: InscripcionCreateNestedManyWithoutTorneoInput
  }

  export type TorneoUncheckedCreateInput = {
    id_torneo?: number
    nombre: string
    fecha_inicio: Date | string
    reglas?: string | null
    premios?: string | null
    tipo_torneo?: string | null
    creadorId: number
    partidas?: PartidaUncheckedCreateNestedManyWithoutTorneoInput
    inscripciones?: InscripcionUncheckedCreateNestedManyWithoutTorneoInput
  }

  export type TorneoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    reglas?: NullableStringFieldUpdateOperationsInput | string | null
    premios?: NullableStringFieldUpdateOperationsInput | string | null
    tipo_torneo?: NullableStringFieldUpdateOperationsInput | string | null
    creador?: UsuarioUpdateOneRequiredWithoutTorneosCreadosNestedInput
    partidas?: PartidaUpdateManyWithoutTorneoNestedInput
    inscripciones?: InscripcionUpdateManyWithoutTorneoNestedInput
  }

  export type TorneoUncheckedUpdateInput = {
    id_torneo?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    reglas?: NullableStringFieldUpdateOperationsInput | string | null
    premios?: NullableStringFieldUpdateOperationsInput | string | null
    tipo_torneo?: NullableStringFieldUpdateOperationsInput | string | null
    creadorId?: IntFieldUpdateOperationsInput | number
    partidas?: PartidaUncheckedUpdateManyWithoutTorneoNestedInput
    inscripciones?: InscripcionUncheckedUpdateManyWithoutTorneoNestedInput
  }

  export type TorneoCreateManyInput = {
    id_torneo?: number
    nombre: string
    fecha_inicio: Date | string
    reglas?: string | null
    premios?: string | null
    tipo_torneo?: string | null
    creadorId: number
  }

  export type TorneoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    reglas?: NullableStringFieldUpdateOperationsInput | string | null
    premios?: NullableStringFieldUpdateOperationsInput | string | null
    tipo_torneo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TorneoUncheckedUpdateManyInput = {
    id_torneo?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    reglas?: NullableStringFieldUpdateOperationsInput | string | null
    premios?: NullableStringFieldUpdateOperationsInput | string | null
    tipo_torneo?: NullableStringFieldUpdateOperationsInput | string | null
    creadorId?: IntFieldUpdateOperationsInput | number
  }

  export type PartidaCreateInput = {
    resultado?: string | null
    fecha_partida: Date | string
    torneo: TorneoCreateNestedOneWithoutPartidasInput
  }

  export type PartidaUncheckedCreateInput = {
    id_partida?: number
    resultado?: string | null
    fecha_partida: Date | string
    torneoId: number
  }

  export type PartidaUpdateInput = {
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_partida?: DateTimeFieldUpdateOperationsInput | Date | string
    torneo?: TorneoUpdateOneRequiredWithoutPartidasNestedInput
  }

  export type PartidaUncheckedUpdateInput = {
    id_partida?: IntFieldUpdateOperationsInput | number
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_partida?: DateTimeFieldUpdateOperationsInput | Date | string
    torneoId?: IntFieldUpdateOperationsInput | number
  }

  export type PartidaCreateManyInput = {
    id_partida?: number
    resultado?: string | null
    fecha_partida: Date | string
    torneoId: number
  }

  export type PartidaUpdateManyMutationInput = {
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_partida?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartidaUncheckedUpdateManyInput = {
    id_partida?: IntFieldUpdateOperationsInput | number
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_partida?: DateTimeFieldUpdateOperationsInput | Date | string
    torneoId?: IntFieldUpdateOperationsInput | number
  }

  export type InscripcionCreateInput = {
    fecha_inscripcion?: Date | string
    usuario: UsuarioCreateNestedOneWithoutInscripcionesInput
    torneo: TorneoCreateNestedOneWithoutInscripcionesInput
  }

  export type InscripcionUncheckedCreateInput = {
    id_inscripcion?: number
    usuarioId: number
    torneoId: number
    fecha_inscripcion?: Date | string
  }

  export type InscripcionUpdateInput = {
    fecha_inscripcion?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutInscripcionesNestedInput
    torneo?: TorneoUpdateOneRequiredWithoutInscripcionesNestedInput
  }

  export type InscripcionUncheckedUpdateInput = {
    id_inscripcion?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    fecha_inscripcion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscripcionCreateManyInput = {
    id_inscripcion?: number
    usuarioId: number
    torneoId: number
    fecha_inscripcion?: Date | string
  }

  export type InscripcionUpdateManyMutationInput = {
    fecha_inscripcion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscripcionUncheckedUpdateManyInput = {
    id_inscripcion?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    fecha_inscripcion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type TorneoListRelationFilter = {
    every?: TorneoWhereInput
    some?: TorneoWhereInput
    none?: TorneoWhereInput
  }

  export type InscripcionListRelationFilter = {
    every?: InscripcionWhereInput
    some?: InscripcionWhereInput
    none?: InscripcionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TorneoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InscripcionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioOrderByRelevanceInput = {
    fields: UsuarioOrderByRelevanceFieldEnum | UsuarioOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UsuarioCountOrderByAggregateInput = {
    id_usuario?: SortOrder
    email?: SortOrder
    nombre?: SortOrder
    password?: SortOrder
    ELO?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id_usuario?: SortOrder
    ELO?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id_usuario?: SortOrder
    email?: SortOrder
    nombre?: SortOrder
    password?: SortOrder
    ELO?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id_usuario?: SortOrder
    email?: SortOrder
    nombre?: SortOrder
    password?: SortOrder
    ELO?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id_usuario?: SortOrder
    ELO?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UsuarioScalarRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type PartidaListRelationFilter = {
    every?: PartidaWhereInput
    some?: PartidaWhereInput
    none?: PartidaWhereInput
  }

  export type PartidaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TorneoOrderByRelevanceInput = {
    fields: TorneoOrderByRelevanceFieldEnum | TorneoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TorneoCountOrderByAggregateInput = {
    id_torneo?: SortOrder
    nombre?: SortOrder
    fecha_inicio?: SortOrder
    reglas?: SortOrder
    premios?: SortOrder
    tipo_torneo?: SortOrder
    creadorId?: SortOrder
  }

  export type TorneoAvgOrderByAggregateInput = {
    id_torneo?: SortOrder
    creadorId?: SortOrder
  }

  export type TorneoMaxOrderByAggregateInput = {
    id_torneo?: SortOrder
    nombre?: SortOrder
    fecha_inicio?: SortOrder
    reglas?: SortOrder
    premios?: SortOrder
    tipo_torneo?: SortOrder
    creadorId?: SortOrder
  }

  export type TorneoMinOrderByAggregateInput = {
    id_torneo?: SortOrder
    nombre?: SortOrder
    fecha_inicio?: SortOrder
    reglas?: SortOrder
    premios?: SortOrder
    tipo_torneo?: SortOrder
    creadorId?: SortOrder
  }

  export type TorneoSumOrderByAggregateInput = {
    id_torneo?: SortOrder
    creadorId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type TorneoScalarRelationFilter = {
    is?: TorneoWhereInput
    isNot?: TorneoWhereInput
  }

  export type PartidaOrderByRelevanceInput = {
    fields: PartidaOrderByRelevanceFieldEnum | PartidaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PartidaCountOrderByAggregateInput = {
    id_partida?: SortOrder
    resultado?: SortOrder
    fecha_partida?: SortOrder
    torneoId?: SortOrder
  }

  export type PartidaAvgOrderByAggregateInput = {
    id_partida?: SortOrder
    torneoId?: SortOrder
  }

  export type PartidaMaxOrderByAggregateInput = {
    id_partida?: SortOrder
    resultado?: SortOrder
    fecha_partida?: SortOrder
    torneoId?: SortOrder
  }

  export type PartidaMinOrderByAggregateInput = {
    id_partida?: SortOrder
    resultado?: SortOrder
    fecha_partida?: SortOrder
    torneoId?: SortOrder
  }

  export type PartidaSumOrderByAggregateInput = {
    id_partida?: SortOrder
    torneoId?: SortOrder
  }

  export type InscripcionUsuarioIdTorneoIdCompoundUniqueInput = {
    usuarioId: number
    torneoId: number
  }

  export type InscripcionCountOrderByAggregateInput = {
    id_inscripcion?: SortOrder
    usuarioId?: SortOrder
    torneoId?: SortOrder
    fecha_inscripcion?: SortOrder
  }

  export type InscripcionAvgOrderByAggregateInput = {
    id_inscripcion?: SortOrder
    usuarioId?: SortOrder
    torneoId?: SortOrder
  }

  export type InscripcionMaxOrderByAggregateInput = {
    id_inscripcion?: SortOrder
    usuarioId?: SortOrder
    torneoId?: SortOrder
    fecha_inscripcion?: SortOrder
  }

  export type InscripcionMinOrderByAggregateInput = {
    id_inscripcion?: SortOrder
    usuarioId?: SortOrder
    torneoId?: SortOrder
    fecha_inscripcion?: SortOrder
  }

  export type InscripcionSumOrderByAggregateInput = {
    id_inscripcion?: SortOrder
    usuarioId?: SortOrder
    torneoId?: SortOrder
  }

  export type TorneoCreateNestedManyWithoutCreadorInput = {
    create?: XOR<TorneoCreateWithoutCreadorInput, TorneoUncheckedCreateWithoutCreadorInput> | TorneoCreateWithoutCreadorInput[] | TorneoUncheckedCreateWithoutCreadorInput[]
    connectOrCreate?: TorneoCreateOrConnectWithoutCreadorInput | TorneoCreateOrConnectWithoutCreadorInput[]
    createMany?: TorneoCreateManyCreadorInputEnvelope
    connect?: TorneoWhereUniqueInput | TorneoWhereUniqueInput[]
  }

  export type InscripcionCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<InscripcionCreateWithoutUsuarioInput, InscripcionUncheckedCreateWithoutUsuarioInput> | InscripcionCreateWithoutUsuarioInput[] | InscripcionUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: InscripcionCreateOrConnectWithoutUsuarioInput | InscripcionCreateOrConnectWithoutUsuarioInput[]
    createMany?: InscripcionCreateManyUsuarioInputEnvelope
    connect?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
  }

  export type TorneoUncheckedCreateNestedManyWithoutCreadorInput = {
    create?: XOR<TorneoCreateWithoutCreadorInput, TorneoUncheckedCreateWithoutCreadorInput> | TorneoCreateWithoutCreadorInput[] | TorneoUncheckedCreateWithoutCreadorInput[]
    connectOrCreate?: TorneoCreateOrConnectWithoutCreadorInput | TorneoCreateOrConnectWithoutCreadorInput[]
    createMany?: TorneoCreateManyCreadorInputEnvelope
    connect?: TorneoWhereUniqueInput | TorneoWhereUniqueInput[]
  }

  export type InscripcionUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<InscripcionCreateWithoutUsuarioInput, InscripcionUncheckedCreateWithoutUsuarioInput> | InscripcionCreateWithoutUsuarioInput[] | InscripcionUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: InscripcionCreateOrConnectWithoutUsuarioInput | InscripcionCreateOrConnectWithoutUsuarioInput[]
    createMany?: InscripcionCreateManyUsuarioInputEnvelope
    connect?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TorneoUpdateManyWithoutCreadorNestedInput = {
    create?: XOR<TorneoCreateWithoutCreadorInput, TorneoUncheckedCreateWithoutCreadorInput> | TorneoCreateWithoutCreadorInput[] | TorneoUncheckedCreateWithoutCreadorInput[]
    connectOrCreate?: TorneoCreateOrConnectWithoutCreadorInput | TorneoCreateOrConnectWithoutCreadorInput[]
    upsert?: TorneoUpsertWithWhereUniqueWithoutCreadorInput | TorneoUpsertWithWhereUniqueWithoutCreadorInput[]
    createMany?: TorneoCreateManyCreadorInputEnvelope
    set?: TorneoWhereUniqueInput | TorneoWhereUniqueInput[]
    disconnect?: TorneoWhereUniqueInput | TorneoWhereUniqueInput[]
    delete?: TorneoWhereUniqueInput | TorneoWhereUniqueInput[]
    connect?: TorneoWhereUniqueInput | TorneoWhereUniqueInput[]
    update?: TorneoUpdateWithWhereUniqueWithoutCreadorInput | TorneoUpdateWithWhereUniqueWithoutCreadorInput[]
    updateMany?: TorneoUpdateManyWithWhereWithoutCreadorInput | TorneoUpdateManyWithWhereWithoutCreadorInput[]
    deleteMany?: TorneoScalarWhereInput | TorneoScalarWhereInput[]
  }

  export type InscripcionUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<InscripcionCreateWithoutUsuarioInput, InscripcionUncheckedCreateWithoutUsuarioInput> | InscripcionCreateWithoutUsuarioInput[] | InscripcionUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: InscripcionCreateOrConnectWithoutUsuarioInput | InscripcionCreateOrConnectWithoutUsuarioInput[]
    upsert?: InscripcionUpsertWithWhereUniqueWithoutUsuarioInput | InscripcionUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: InscripcionCreateManyUsuarioInputEnvelope
    set?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
    disconnect?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
    delete?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
    connect?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
    update?: InscripcionUpdateWithWhereUniqueWithoutUsuarioInput | InscripcionUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: InscripcionUpdateManyWithWhereWithoutUsuarioInput | InscripcionUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: InscripcionScalarWhereInput | InscripcionScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TorneoUncheckedUpdateManyWithoutCreadorNestedInput = {
    create?: XOR<TorneoCreateWithoutCreadorInput, TorneoUncheckedCreateWithoutCreadorInput> | TorneoCreateWithoutCreadorInput[] | TorneoUncheckedCreateWithoutCreadorInput[]
    connectOrCreate?: TorneoCreateOrConnectWithoutCreadorInput | TorneoCreateOrConnectWithoutCreadorInput[]
    upsert?: TorneoUpsertWithWhereUniqueWithoutCreadorInput | TorneoUpsertWithWhereUniqueWithoutCreadorInput[]
    createMany?: TorneoCreateManyCreadorInputEnvelope
    set?: TorneoWhereUniqueInput | TorneoWhereUniqueInput[]
    disconnect?: TorneoWhereUniqueInput | TorneoWhereUniqueInput[]
    delete?: TorneoWhereUniqueInput | TorneoWhereUniqueInput[]
    connect?: TorneoWhereUniqueInput | TorneoWhereUniqueInput[]
    update?: TorneoUpdateWithWhereUniqueWithoutCreadorInput | TorneoUpdateWithWhereUniqueWithoutCreadorInput[]
    updateMany?: TorneoUpdateManyWithWhereWithoutCreadorInput | TorneoUpdateManyWithWhereWithoutCreadorInput[]
    deleteMany?: TorneoScalarWhereInput | TorneoScalarWhereInput[]
  }

  export type InscripcionUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<InscripcionCreateWithoutUsuarioInput, InscripcionUncheckedCreateWithoutUsuarioInput> | InscripcionCreateWithoutUsuarioInput[] | InscripcionUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: InscripcionCreateOrConnectWithoutUsuarioInput | InscripcionCreateOrConnectWithoutUsuarioInput[]
    upsert?: InscripcionUpsertWithWhereUniqueWithoutUsuarioInput | InscripcionUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: InscripcionCreateManyUsuarioInputEnvelope
    set?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
    disconnect?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
    delete?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
    connect?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
    update?: InscripcionUpdateWithWhereUniqueWithoutUsuarioInput | InscripcionUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: InscripcionUpdateManyWithWhereWithoutUsuarioInput | InscripcionUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: InscripcionScalarWhereInput | InscripcionScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutTorneosCreadosInput = {
    create?: XOR<UsuarioCreateWithoutTorneosCreadosInput, UsuarioUncheckedCreateWithoutTorneosCreadosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutTorneosCreadosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type PartidaCreateNestedManyWithoutTorneoInput = {
    create?: XOR<PartidaCreateWithoutTorneoInput, PartidaUncheckedCreateWithoutTorneoInput> | PartidaCreateWithoutTorneoInput[] | PartidaUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: PartidaCreateOrConnectWithoutTorneoInput | PartidaCreateOrConnectWithoutTorneoInput[]
    createMany?: PartidaCreateManyTorneoInputEnvelope
    connect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
  }

  export type InscripcionCreateNestedManyWithoutTorneoInput = {
    create?: XOR<InscripcionCreateWithoutTorneoInput, InscripcionUncheckedCreateWithoutTorneoInput> | InscripcionCreateWithoutTorneoInput[] | InscripcionUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: InscripcionCreateOrConnectWithoutTorneoInput | InscripcionCreateOrConnectWithoutTorneoInput[]
    createMany?: InscripcionCreateManyTorneoInputEnvelope
    connect?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
  }

  export type PartidaUncheckedCreateNestedManyWithoutTorneoInput = {
    create?: XOR<PartidaCreateWithoutTorneoInput, PartidaUncheckedCreateWithoutTorneoInput> | PartidaCreateWithoutTorneoInput[] | PartidaUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: PartidaCreateOrConnectWithoutTorneoInput | PartidaCreateOrConnectWithoutTorneoInput[]
    createMany?: PartidaCreateManyTorneoInputEnvelope
    connect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
  }

  export type InscripcionUncheckedCreateNestedManyWithoutTorneoInput = {
    create?: XOR<InscripcionCreateWithoutTorneoInput, InscripcionUncheckedCreateWithoutTorneoInput> | InscripcionCreateWithoutTorneoInput[] | InscripcionUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: InscripcionCreateOrConnectWithoutTorneoInput | InscripcionCreateOrConnectWithoutTorneoInput[]
    createMany?: InscripcionCreateManyTorneoInputEnvelope
    connect?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UsuarioUpdateOneRequiredWithoutTorneosCreadosNestedInput = {
    create?: XOR<UsuarioCreateWithoutTorneosCreadosInput, UsuarioUncheckedCreateWithoutTorneosCreadosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutTorneosCreadosInput
    upsert?: UsuarioUpsertWithoutTorneosCreadosInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutTorneosCreadosInput, UsuarioUpdateWithoutTorneosCreadosInput>, UsuarioUncheckedUpdateWithoutTorneosCreadosInput>
  }

  export type PartidaUpdateManyWithoutTorneoNestedInput = {
    create?: XOR<PartidaCreateWithoutTorneoInput, PartidaUncheckedCreateWithoutTorneoInput> | PartidaCreateWithoutTorneoInput[] | PartidaUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: PartidaCreateOrConnectWithoutTorneoInput | PartidaCreateOrConnectWithoutTorneoInput[]
    upsert?: PartidaUpsertWithWhereUniqueWithoutTorneoInput | PartidaUpsertWithWhereUniqueWithoutTorneoInput[]
    createMany?: PartidaCreateManyTorneoInputEnvelope
    set?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    disconnect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    delete?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    connect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    update?: PartidaUpdateWithWhereUniqueWithoutTorneoInput | PartidaUpdateWithWhereUniqueWithoutTorneoInput[]
    updateMany?: PartidaUpdateManyWithWhereWithoutTorneoInput | PartidaUpdateManyWithWhereWithoutTorneoInput[]
    deleteMany?: PartidaScalarWhereInput | PartidaScalarWhereInput[]
  }

  export type InscripcionUpdateManyWithoutTorneoNestedInput = {
    create?: XOR<InscripcionCreateWithoutTorneoInput, InscripcionUncheckedCreateWithoutTorneoInput> | InscripcionCreateWithoutTorneoInput[] | InscripcionUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: InscripcionCreateOrConnectWithoutTorneoInput | InscripcionCreateOrConnectWithoutTorneoInput[]
    upsert?: InscripcionUpsertWithWhereUniqueWithoutTorneoInput | InscripcionUpsertWithWhereUniqueWithoutTorneoInput[]
    createMany?: InscripcionCreateManyTorneoInputEnvelope
    set?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
    disconnect?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
    delete?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
    connect?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
    update?: InscripcionUpdateWithWhereUniqueWithoutTorneoInput | InscripcionUpdateWithWhereUniqueWithoutTorneoInput[]
    updateMany?: InscripcionUpdateManyWithWhereWithoutTorneoInput | InscripcionUpdateManyWithWhereWithoutTorneoInput[]
    deleteMany?: InscripcionScalarWhereInput | InscripcionScalarWhereInput[]
  }

  export type PartidaUncheckedUpdateManyWithoutTorneoNestedInput = {
    create?: XOR<PartidaCreateWithoutTorneoInput, PartidaUncheckedCreateWithoutTorneoInput> | PartidaCreateWithoutTorneoInput[] | PartidaUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: PartidaCreateOrConnectWithoutTorneoInput | PartidaCreateOrConnectWithoutTorneoInput[]
    upsert?: PartidaUpsertWithWhereUniqueWithoutTorneoInput | PartidaUpsertWithWhereUniqueWithoutTorneoInput[]
    createMany?: PartidaCreateManyTorneoInputEnvelope
    set?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    disconnect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    delete?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    connect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    update?: PartidaUpdateWithWhereUniqueWithoutTorneoInput | PartidaUpdateWithWhereUniqueWithoutTorneoInput[]
    updateMany?: PartidaUpdateManyWithWhereWithoutTorneoInput | PartidaUpdateManyWithWhereWithoutTorneoInput[]
    deleteMany?: PartidaScalarWhereInput | PartidaScalarWhereInput[]
  }

  export type InscripcionUncheckedUpdateManyWithoutTorneoNestedInput = {
    create?: XOR<InscripcionCreateWithoutTorneoInput, InscripcionUncheckedCreateWithoutTorneoInput> | InscripcionCreateWithoutTorneoInput[] | InscripcionUncheckedCreateWithoutTorneoInput[]
    connectOrCreate?: InscripcionCreateOrConnectWithoutTorneoInput | InscripcionCreateOrConnectWithoutTorneoInput[]
    upsert?: InscripcionUpsertWithWhereUniqueWithoutTorneoInput | InscripcionUpsertWithWhereUniqueWithoutTorneoInput[]
    createMany?: InscripcionCreateManyTorneoInputEnvelope
    set?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
    disconnect?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
    delete?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
    connect?: InscripcionWhereUniqueInput | InscripcionWhereUniqueInput[]
    update?: InscripcionUpdateWithWhereUniqueWithoutTorneoInput | InscripcionUpdateWithWhereUniqueWithoutTorneoInput[]
    updateMany?: InscripcionUpdateManyWithWhereWithoutTorneoInput | InscripcionUpdateManyWithWhereWithoutTorneoInput[]
    deleteMany?: InscripcionScalarWhereInput | InscripcionScalarWhereInput[]
  }

  export type TorneoCreateNestedOneWithoutPartidasInput = {
    create?: XOR<TorneoCreateWithoutPartidasInput, TorneoUncheckedCreateWithoutPartidasInput>
    connectOrCreate?: TorneoCreateOrConnectWithoutPartidasInput
    connect?: TorneoWhereUniqueInput
  }

  export type TorneoUpdateOneRequiredWithoutPartidasNestedInput = {
    create?: XOR<TorneoCreateWithoutPartidasInput, TorneoUncheckedCreateWithoutPartidasInput>
    connectOrCreate?: TorneoCreateOrConnectWithoutPartidasInput
    upsert?: TorneoUpsertWithoutPartidasInput
    connect?: TorneoWhereUniqueInput
    update?: XOR<XOR<TorneoUpdateToOneWithWhereWithoutPartidasInput, TorneoUpdateWithoutPartidasInput>, TorneoUncheckedUpdateWithoutPartidasInput>
  }

  export type UsuarioCreateNestedOneWithoutInscripcionesInput = {
    create?: XOR<UsuarioCreateWithoutInscripcionesInput, UsuarioUncheckedCreateWithoutInscripcionesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutInscripcionesInput
    connect?: UsuarioWhereUniqueInput
  }

  export type TorneoCreateNestedOneWithoutInscripcionesInput = {
    create?: XOR<TorneoCreateWithoutInscripcionesInput, TorneoUncheckedCreateWithoutInscripcionesInput>
    connectOrCreate?: TorneoCreateOrConnectWithoutInscripcionesInput
    connect?: TorneoWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutInscripcionesNestedInput = {
    create?: XOR<UsuarioCreateWithoutInscripcionesInput, UsuarioUncheckedCreateWithoutInscripcionesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutInscripcionesInput
    upsert?: UsuarioUpsertWithoutInscripcionesInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutInscripcionesInput, UsuarioUpdateWithoutInscripcionesInput>, UsuarioUncheckedUpdateWithoutInscripcionesInput>
  }

  export type TorneoUpdateOneRequiredWithoutInscripcionesNestedInput = {
    create?: XOR<TorneoCreateWithoutInscripcionesInput, TorneoUncheckedCreateWithoutInscripcionesInput>
    connectOrCreate?: TorneoCreateOrConnectWithoutInscripcionesInput
    upsert?: TorneoUpsertWithoutInscripcionesInput
    connect?: TorneoWhereUniqueInput
    update?: XOR<XOR<TorneoUpdateToOneWithWhereWithoutInscripcionesInput, TorneoUpdateWithoutInscripcionesInput>, TorneoUncheckedUpdateWithoutInscripcionesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type TorneoCreateWithoutCreadorInput = {
    nombre: string
    fecha_inicio: Date | string
    reglas?: string | null
    premios?: string | null
    tipo_torneo?: string | null
    partidas?: PartidaCreateNestedManyWithoutTorneoInput
    inscripciones?: InscripcionCreateNestedManyWithoutTorneoInput
  }

  export type TorneoUncheckedCreateWithoutCreadorInput = {
    id_torneo?: number
    nombre: string
    fecha_inicio: Date | string
    reglas?: string | null
    premios?: string | null
    tipo_torneo?: string | null
    partidas?: PartidaUncheckedCreateNestedManyWithoutTorneoInput
    inscripciones?: InscripcionUncheckedCreateNestedManyWithoutTorneoInput
  }

  export type TorneoCreateOrConnectWithoutCreadorInput = {
    where: TorneoWhereUniqueInput
    create: XOR<TorneoCreateWithoutCreadorInput, TorneoUncheckedCreateWithoutCreadorInput>
  }

  export type TorneoCreateManyCreadorInputEnvelope = {
    data: TorneoCreateManyCreadorInput | TorneoCreateManyCreadorInput[]
    skipDuplicates?: boolean
  }

  export type InscripcionCreateWithoutUsuarioInput = {
    fecha_inscripcion?: Date | string
    torneo: TorneoCreateNestedOneWithoutInscripcionesInput
  }

  export type InscripcionUncheckedCreateWithoutUsuarioInput = {
    id_inscripcion?: number
    torneoId: number
    fecha_inscripcion?: Date | string
  }

  export type InscripcionCreateOrConnectWithoutUsuarioInput = {
    where: InscripcionWhereUniqueInput
    create: XOR<InscripcionCreateWithoutUsuarioInput, InscripcionUncheckedCreateWithoutUsuarioInput>
  }

  export type InscripcionCreateManyUsuarioInputEnvelope = {
    data: InscripcionCreateManyUsuarioInput | InscripcionCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type TorneoUpsertWithWhereUniqueWithoutCreadorInput = {
    where: TorneoWhereUniqueInput
    update: XOR<TorneoUpdateWithoutCreadorInput, TorneoUncheckedUpdateWithoutCreadorInput>
    create: XOR<TorneoCreateWithoutCreadorInput, TorneoUncheckedCreateWithoutCreadorInput>
  }

  export type TorneoUpdateWithWhereUniqueWithoutCreadorInput = {
    where: TorneoWhereUniqueInput
    data: XOR<TorneoUpdateWithoutCreadorInput, TorneoUncheckedUpdateWithoutCreadorInput>
  }

  export type TorneoUpdateManyWithWhereWithoutCreadorInput = {
    where: TorneoScalarWhereInput
    data: XOR<TorneoUpdateManyMutationInput, TorneoUncheckedUpdateManyWithoutCreadorInput>
  }

  export type TorneoScalarWhereInput = {
    AND?: TorneoScalarWhereInput | TorneoScalarWhereInput[]
    OR?: TorneoScalarWhereInput[]
    NOT?: TorneoScalarWhereInput | TorneoScalarWhereInput[]
    id_torneo?: IntFilter<"Torneo"> | number
    nombre?: StringFilter<"Torneo"> | string
    fecha_inicio?: DateTimeFilter<"Torneo"> | Date | string
    reglas?: StringNullableFilter<"Torneo"> | string | null
    premios?: StringNullableFilter<"Torneo"> | string | null
    tipo_torneo?: StringNullableFilter<"Torneo"> | string | null
    creadorId?: IntFilter<"Torneo"> | number
  }

  export type InscripcionUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: InscripcionWhereUniqueInput
    update: XOR<InscripcionUpdateWithoutUsuarioInput, InscripcionUncheckedUpdateWithoutUsuarioInput>
    create: XOR<InscripcionCreateWithoutUsuarioInput, InscripcionUncheckedCreateWithoutUsuarioInput>
  }

  export type InscripcionUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: InscripcionWhereUniqueInput
    data: XOR<InscripcionUpdateWithoutUsuarioInput, InscripcionUncheckedUpdateWithoutUsuarioInput>
  }

  export type InscripcionUpdateManyWithWhereWithoutUsuarioInput = {
    where: InscripcionScalarWhereInput
    data: XOR<InscripcionUpdateManyMutationInput, InscripcionUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type InscripcionScalarWhereInput = {
    AND?: InscripcionScalarWhereInput | InscripcionScalarWhereInput[]
    OR?: InscripcionScalarWhereInput[]
    NOT?: InscripcionScalarWhereInput | InscripcionScalarWhereInput[]
    id_inscripcion?: IntFilter<"Inscripcion"> | number
    usuarioId?: IntFilter<"Inscripcion"> | number
    torneoId?: IntFilter<"Inscripcion"> | number
    fecha_inscripcion?: DateTimeFilter<"Inscripcion"> | Date | string
  }

  export type UsuarioCreateWithoutTorneosCreadosInput = {
    email: string
    nombre: string
    password: string
    ELO?: number | null
    inscripciones?: InscripcionCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutTorneosCreadosInput = {
    id_usuario?: number
    email: string
    nombre: string
    password: string
    ELO?: number | null
    inscripciones?: InscripcionUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutTorneosCreadosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutTorneosCreadosInput, UsuarioUncheckedCreateWithoutTorneosCreadosInput>
  }

  export type PartidaCreateWithoutTorneoInput = {
    resultado?: string | null
    fecha_partida: Date | string
  }

  export type PartidaUncheckedCreateWithoutTorneoInput = {
    id_partida?: number
    resultado?: string | null
    fecha_partida: Date | string
  }

  export type PartidaCreateOrConnectWithoutTorneoInput = {
    where: PartidaWhereUniqueInput
    create: XOR<PartidaCreateWithoutTorneoInput, PartidaUncheckedCreateWithoutTorneoInput>
  }

  export type PartidaCreateManyTorneoInputEnvelope = {
    data: PartidaCreateManyTorneoInput | PartidaCreateManyTorneoInput[]
    skipDuplicates?: boolean
  }

  export type InscripcionCreateWithoutTorneoInput = {
    fecha_inscripcion?: Date | string
    usuario: UsuarioCreateNestedOneWithoutInscripcionesInput
  }

  export type InscripcionUncheckedCreateWithoutTorneoInput = {
    id_inscripcion?: number
    usuarioId: number
    fecha_inscripcion?: Date | string
  }

  export type InscripcionCreateOrConnectWithoutTorneoInput = {
    where: InscripcionWhereUniqueInput
    create: XOR<InscripcionCreateWithoutTorneoInput, InscripcionUncheckedCreateWithoutTorneoInput>
  }

  export type InscripcionCreateManyTorneoInputEnvelope = {
    data: InscripcionCreateManyTorneoInput | InscripcionCreateManyTorneoInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithoutTorneosCreadosInput = {
    update: XOR<UsuarioUpdateWithoutTorneosCreadosInput, UsuarioUncheckedUpdateWithoutTorneosCreadosInput>
    create: XOR<UsuarioCreateWithoutTorneosCreadosInput, UsuarioUncheckedCreateWithoutTorneosCreadosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutTorneosCreadosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutTorneosCreadosInput, UsuarioUncheckedUpdateWithoutTorneosCreadosInput>
  }

  export type UsuarioUpdateWithoutTorneosCreadosInput = {
    email?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ELO?: NullableIntFieldUpdateOperationsInput | number | null
    inscripciones?: InscripcionUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutTorneosCreadosInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ELO?: NullableIntFieldUpdateOperationsInput | number | null
    inscripciones?: InscripcionUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type PartidaUpsertWithWhereUniqueWithoutTorneoInput = {
    where: PartidaWhereUniqueInput
    update: XOR<PartidaUpdateWithoutTorneoInput, PartidaUncheckedUpdateWithoutTorneoInput>
    create: XOR<PartidaCreateWithoutTorneoInput, PartidaUncheckedCreateWithoutTorneoInput>
  }

  export type PartidaUpdateWithWhereUniqueWithoutTorneoInput = {
    where: PartidaWhereUniqueInput
    data: XOR<PartidaUpdateWithoutTorneoInput, PartidaUncheckedUpdateWithoutTorneoInput>
  }

  export type PartidaUpdateManyWithWhereWithoutTorneoInput = {
    where: PartidaScalarWhereInput
    data: XOR<PartidaUpdateManyMutationInput, PartidaUncheckedUpdateManyWithoutTorneoInput>
  }

  export type PartidaScalarWhereInput = {
    AND?: PartidaScalarWhereInput | PartidaScalarWhereInput[]
    OR?: PartidaScalarWhereInput[]
    NOT?: PartidaScalarWhereInput | PartidaScalarWhereInput[]
    id_partida?: IntFilter<"Partida"> | number
    resultado?: StringNullableFilter<"Partida"> | string | null
    fecha_partida?: DateTimeFilter<"Partida"> | Date | string
    torneoId?: IntFilter<"Partida"> | number
  }

  export type InscripcionUpsertWithWhereUniqueWithoutTorneoInput = {
    where: InscripcionWhereUniqueInput
    update: XOR<InscripcionUpdateWithoutTorneoInput, InscripcionUncheckedUpdateWithoutTorneoInput>
    create: XOR<InscripcionCreateWithoutTorneoInput, InscripcionUncheckedCreateWithoutTorneoInput>
  }

  export type InscripcionUpdateWithWhereUniqueWithoutTorneoInput = {
    where: InscripcionWhereUniqueInput
    data: XOR<InscripcionUpdateWithoutTorneoInput, InscripcionUncheckedUpdateWithoutTorneoInput>
  }

  export type InscripcionUpdateManyWithWhereWithoutTorneoInput = {
    where: InscripcionScalarWhereInput
    data: XOR<InscripcionUpdateManyMutationInput, InscripcionUncheckedUpdateManyWithoutTorneoInput>
  }

  export type TorneoCreateWithoutPartidasInput = {
    nombre: string
    fecha_inicio: Date | string
    reglas?: string | null
    premios?: string | null
    tipo_torneo?: string | null
    creador: UsuarioCreateNestedOneWithoutTorneosCreadosInput
    inscripciones?: InscripcionCreateNestedManyWithoutTorneoInput
  }

  export type TorneoUncheckedCreateWithoutPartidasInput = {
    id_torneo?: number
    nombre: string
    fecha_inicio: Date | string
    reglas?: string | null
    premios?: string | null
    tipo_torneo?: string | null
    creadorId: number
    inscripciones?: InscripcionUncheckedCreateNestedManyWithoutTorneoInput
  }

  export type TorneoCreateOrConnectWithoutPartidasInput = {
    where: TorneoWhereUniqueInput
    create: XOR<TorneoCreateWithoutPartidasInput, TorneoUncheckedCreateWithoutPartidasInput>
  }

  export type TorneoUpsertWithoutPartidasInput = {
    update: XOR<TorneoUpdateWithoutPartidasInput, TorneoUncheckedUpdateWithoutPartidasInput>
    create: XOR<TorneoCreateWithoutPartidasInput, TorneoUncheckedCreateWithoutPartidasInput>
    where?: TorneoWhereInput
  }

  export type TorneoUpdateToOneWithWhereWithoutPartidasInput = {
    where?: TorneoWhereInput
    data: XOR<TorneoUpdateWithoutPartidasInput, TorneoUncheckedUpdateWithoutPartidasInput>
  }

  export type TorneoUpdateWithoutPartidasInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    reglas?: NullableStringFieldUpdateOperationsInput | string | null
    premios?: NullableStringFieldUpdateOperationsInput | string | null
    tipo_torneo?: NullableStringFieldUpdateOperationsInput | string | null
    creador?: UsuarioUpdateOneRequiredWithoutTorneosCreadosNestedInput
    inscripciones?: InscripcionUpdateManyWithoutTorneoNestedInput
  }

  export type TorneoUncheckedUpdateWithoutPartidasInput = {
    id_torneo?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    reglas?: NullableStringFieldUpdateOperationsInput | string | null
    premios?: NullableStringFieldUpdateOperationsInput | string | null
    tipo_torneo?: NullableStringFieldUpdateOperationsInput | string | null
    creadorId?: IntFieldUpdateOperationsInput | number
    inscripciones?: InscripcionUncheckedUpdateManyWithoutTorneoNestedInput
  }

  export type UsuarioCreateWithoutInscripcionesInput = {
    email: string
    nombre: string
    password: string
    ELO?: number | null
    torneosCreados?: TorneoCreateNestedManyWithoutCreadorInput
  }

  export type UsuarioUncheckedCreateWithoutInscripcionesInput = {
    id_usuario?: number
    email: string
    nombre: string
    password: string
    ELO?: number | null
    torneosCreados?: TorneoUncheckedCreateNestedManyWithoutCreadorInput
  }

  export type UsuarioCreateOrConnectWithoutInscripcionesInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutInscripcionesInput, UsuarioUncheckedCreateWithoutInscripcionesInput>
  }

  export type TorneoCreateWithoutInscripcionesInput = {
    nombre: string
    fecha_inicio: Date | string
    reglas?: string | null
    premios?: string | null
    tipo_torneo?: string | null
    creador: UsuarioCreateNestedOneWithoutTorneosCreadosInput
    partidas?: PartidaCreateNestedManyWithoutTorneoInput
  }

  export type TorneoUncheckedCreateWithoutInscripcionesInput = {
    id_torneo?: number
    nombre: string
    fecha_inicio: Date | string
    reglas?: string | null
    premios?: string | null
    tipo_torneo?: string | null
    creadorId: number
    partidas?: PartidaUncheckedCreateNestedManyWithoutTorneoInput
  }

  export type TorneoCreateOrConnectWithoutInscripcionesInput = {
    where: TorneoWhereUniqueInput
    create: XOR<TorneoCreateWithoutInscripcionesInput, TorneoUncheckedCreateWithoutInscripcionesInput>
  }

  export type UsuarioUpsertWithoutInscripcionesInput = {
    update: XOR<UsuarioUpdateWithoutInscripcionesInput, UsuarioUncheckedUpdateWithoutInscripcionesInput>
    create: XOR<UsuarioCreateWithoutInscripcionesInput, UsuarioUncheckedCreateWithoutInscripcionesInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutInscripcionesInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutInscripcionesInput, UsuarioUncheckedUpdateWithoutInscripcionesInput>
  }

  export type UsuarioUpdateWithoutInscripcionesInput = {
    email?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ELO?: NullableIntFieldUpdateOperationsInput | number | null
    torneosCreados?: TorneoUpdateManyWithoutCreadorNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutInscripcionesInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    ELO?: NullableIntFieldUpdateOperationsInput | number | null
    torneosCreados?: TorneoUncheckedUpdateManyWithoutCreadorNestedInput
  }

  export type TorneoUpsertWithoutInscripcionesInput = {
    update: XOR<TorneoUpdateWithoutInscripcionesInput, TorneoUncheckedUpdateWithoutInscripcionesInput>
    create: XOR<TorneoCreateWithoutInscripcionesInput, TorneoUncheckedCreateWithoutInscripcionesInput>
    where?: TorneoWhereInput
  }

  export type TorneoUpdateToOneWithWhereWithoutInscripcionesInput = {
    where?: TorneoWhereInput
    data: XOR<TorneoUpdateWithoutInscripcionesInput, TorneoUncheckedUpdateWithoutInscripcionesInput>
  }

  export type TorneoUpdateWithoutInscripcionesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    reglas?: NullableStringFieldUpdateOperationsInput | string | null
    premios?: NullableStringFieldUpdateOperationsInput | string | null
    tipo_torneo?: NullableStringFieldUpdateOperationsInput | string | null
    creador?: UsuarioUpdateOneRequiredWithoutTorneosCreadosNestedInput
    partidas?: PartidaUpdateManyWithoutTorneoNestedInput
  }

  export type TorneoUncheckedUpdateWithoutInscripcionesInput = {
    id_torneo?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    reglas?: NullableStringFieldUpdateOperationsInput | string | null
    premios?: NullableStringFieldUpdateOperationsInput | string | null
    tipo_torneo?: NullableStringFieldUpdateOperationsInput | string | null
    creadorId?: IntFieldUpdateOperationsInput | number
    partidas?: PartidaUncheckedUpdateManyWithoutTorneoNestedInput
  }

  export type TorneoCreateManyCreadorInput = {
    id_torneo?: number
    nombre: string
    fecha_inicio: Date | string
    reglas?: string | null
    premios?: string | null
    tipo_torneo?: string | null
  }

  export type InscripcionCreateManyUsuarioInput = {
    id_inscripcion?: number
    torneoId: number
    fecha_inscripcion?: Date | string
  }

  export type TorneoUpdateWithoutCreadorInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    reglas?: NullableStringFieldUpdateOperationsInput | string | null
    premios?: NullableStringFieldUpdateOperationsInput | string | null
    tipo_torneo?: NullableStringFieldUpdateOperationsInput | string | null
    partidas?: PartidaUpdateManyWithoutTorneoNestedInput
    inscripciones?: InscripcionUpdateManyWithoutTorneoNestedInput
  }

  export type TorneoUncheckedUpdateWithoutCreadorInput = {
    id_torneo?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    reglas?: NullableStringFieldUpdateOperationsInput | string | null
    premios?: NullableStringFieldUpdateOperationsInput | string | null
    tipo_torneo?: NullableStringFieldUpdateOperationsInput | string | null
    partidas?: PartidaUncheckedUpdateManyWithoutTorneoNestedInput
    inscripciones?: InscripcionUncheckedUpdateManyWithoutTorneoNestedInput
  }

  export type TorneoUncheckedUpdateManyWithoutCreadorInput = {
    id_torneo?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    reglas?: NullableStringFieldUpdateOperationsInput | string | null
    premios?: NullableStringFieldUpdateOperationsInput | string | null
    tipo_torneo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InscripcionUpdateWithoutUsuarioInput = {
    fecha_inscripcion?: DateTimeFieldUpdateOperationsInput | Date | string
    torneo?: TorneoUpdateOneRequiredWithoutInscripcionesNestedInput
  }

  export type InscripcionUncheckedUpdateWithoutUsuarioInput = {
    id_inscripcion?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    fecha_inscripcion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscripcionUncheckedUpdateManyWithoutUsuarioInput = {
    id_inscripcion?: IntFieldUpdateOperationsInput | number
    torneoId?: IntFieldUpdateOperationsInput | number
    fecha_inscripcion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartidaCreateManyTorneoInput = {
    id_partida?: number
    resultado?: string | null
    fecha_partida: Date | string
  }

  export type InscripcionCreateManyTorneoInput = {
    id_inscripcion?: number
    usuarioId: number
    fecha_inscripcion?: Date | string
  }

  export type PartidaUpdateWithoutTorneoInput = {
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_partida?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartidaUncheckedUpdateWithoutTorneoInput = {
    id_partida?: IntFieldUpdateOperationsInput | number
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_partida?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartidaUncheckedUpdateManyWithoutTorneoInput = {
    id_partida?: IntFieldUpdateOperationsInput | number
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_partida?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscripcionUpdateWithoutTorneoInput = {
    fecha_inscripcion?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutInscripcionesNestedInput
  }

  export type InscripcionUncheckedUpdateWithoutTorneoInput = {
    id_inscripcion?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    fecha_inscripcion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscripcionUncheckedUpdateManyWithoutTorneoInput = {
    id_inscripcion?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    fecha_inscripcion?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}